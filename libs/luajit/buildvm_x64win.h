/*
** This file has been pre-processed with DynASM.
** http://luajit.org/dynasm.html
** DynASM version 1.3.0, DynASM x64 version 1.3.0
** DO NOT EDIT! The original file is in "buildvm_x86.dasc".
*/

#if DASM_VERSION != 10300
#error "Version mismatch between DynASM and included encoding engine"
#endif

#define DASM_SECTION_CODE_OP	0
#define DASM_SECTION_CODE_SUB	1
#define DASM_MAXSECTION		2
static const unsigned char build_actionlist[15870] = {
  254,1,248,10,252,247,198,237,15,132,244,11,131,230,252,248,41,252,242,72,
  141,76,49,252,248,139,114,252,252,199,68,10,4,237,248,12,131,192,1,137,68,
  36,84,252,247,198,237,15,132,244,13,248,14,129,252,246,239,252,247,198,237,
  15,133,244,10,199,131,233,237,131,230,252,248,41,214,252,247,222,131,232,
  1,15,132,244,248,248,1,72,139,44,10,72,137,106,252,248,131,194,8,131,232,
  1,15,133,244,1,248,2,255,139,108,36,96,137,181,233,248,3,139,68,36,84,139,
  76,36,88,248,4,57,193,15,133,244,252,248,5,131,252,234,8,137,149,233,248,
  15,72,139,76,36,104,72,137,141,233,49,192,248,16,72,131,196,40,91,94,95,93,
  195,248,6,15,130,244,253,59,149,233,15,135,244,254,199,66,252,252,237,131,
  194,8,131,192,1,252,233,244,4,248,7,255,133,201,15,132,244,5,41,193,141,20,
  202,252,233,244,5,248,8,137,149,233,137,68,36,84,137,202,137,252,233,232,
  251,1,0,139,149,233,252,233,244,3,248,17,137,208,72,137,204,248,18,139,108,
  36,96,139,173,233,199,133,233,237,252,233,244,16,248,19,248,20,72,129,225,
  239,72,137,204,248,21,255,139,108,36,96,72,199,193,252,248,252,255,252,255,
  252,255,184,237,139,149,233,139,157,233,129,195,239,139,114,252,252,199,66,
  252,252,237,199,131,233,237,252,233,244,12,248,22,186,237,252,233,244,248,
  248,23,131,232,8,252,233,244,247,248,24,141,68,194,252,248,248,1,15,182,142,
  233,131,198,4,137,149,233,255,137,133,233,137,116,36,100,137,202,248,2,137,
  252,233,232,251,1,0,139,149,233,139,133,233,139,106,252,248,41,208,193,232,
  3,131,192,1,139,181,233,139,14,15,182,252,233,15,182,205,131,198,4,252,255,
  36,252,235,248,25,85,87,86,83,72,131,252,236,40,137,205,137,76,36,96,137,
  209,190,237,49,192,72,141,188,253,36,233,139,157,233,129,195,239,72,137,189,
  233,137,68,36,100,72,137,68,36,104,137,68,36,88,137,68,36,92,56,133,233,15,
  132,244,249,199,131,233,237,136,133,233,139,149,233,139,133,233,41,200,193,
  232,3,131,192,1,41,209,139,114,252,252,137,68,36,84,252,247,198,237,255,15,
  132,244,13,252,233,244,14,248,26,85,87,86,83,72,131,252,236,40,190,237,68,
  137,76,36,92,252,233,244,247,248,27,85,87,86,83,72,131,252,236,40,190,237,
  248,1,68,137,68,36,88,137,205,137,76,36,96,137,209,72,139,189,233,72,137,
  124,36,104,137,108,36,100,72,137,165,233,248,2,139,157,233,129,195,239,248,
  3,199,131,233,237,139,149,233,255,1,206,41,214,139,133,233,41,200,193,232,
  3,131,192,1,248,28,139,105,252,248,129,121,253,252,252,239,15,133,244,29,
  248,30,137,202,137,114,252,252,139,181,233,139,14,15,182,252,233,15,182,205,
  131,198,4,252,255,36,252,235,248,31,85,87,86,83,72,131,252,236,40,137,205,
  137,76,36,96,137,108,36,100,139,189,233,43,189,233,199,68,36,92,0,0,0,0,137,
  124,36,88,72,139,189,233,72,137,124,36,104,72,137,165,233,65,252,255,209,
  133,192,15,132,244,15,137,193,190,237,252,233,244,2,248,11,1,209,131,230,
  252,248,137,213,41,252,242,199,68,193,252,252,237,137,200,139,117,252,244,
  72,99,77,252,240,133,201,15,132,244,247,255,72,141,61,245,72,1,252,249,139,
  122,252,248,139,191,233,139,191,233,252,255,225,248,1,41,213,193,252,237,
  3,141,69,252,255,252,233,244,32,248,33,15,182,78,252,255,131,252,237,16,141,
  12,202,41,252,233,15,132,244,34,252,247,217,193,252,233,3,65,137,200,139,
  76,36,96,137,145,233,72,139,0,72,137,69,0,137,252,234,252,233,244,35,248,
  36,137,68,36,80,199,68,36,84,237,72,141,68,36,80,128,126,252,252,235,15,133,
  244,247,141,139,233,137,41,199,65,4,237,255,137,205,252,233,244,248,248,37,
  15,182,70,252,254,255,199,68,36,84,237,137,68,36,80,255,252,242,15,42,192,
  252,242,15,17,68,36,80,255,72,141,68,36,80,252,233,244,247,248,38,15,182,
  70,252,254,141,4,194,248,1,15,182,110,252,255,141,44,252,234,248,2,139,76,
  36,96,137,145,233,137,252,234,73,137,192,137,205,137,116,36,100,232,251,1,
  1,139,149,233,133,192,15,132,244,249,248,34,15,182,78,252,253,72,139,40,72,
  137,44,202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,
  235,248,3,139,141,233,137,113,252,244,141,177,233,41,214,139,105,252,248,
  184,237,252,233,244,30,248,39,137,68,36,80,199,68,36,84,237,72,141,68,36,
  80,128,126,252,252,235,15,133,244,247,255,141,139,233,137,41,199,65,4,237,
  137,205,252,233,244,248,248,40,15,182,70,252,254,255,72,141,68,36,80,252,
  233,244,247,248,41,15,182,70,252,254,141,4,194,248,1,15,182,110,252,255,141,
  44,252,234,248,2,139,76,36,96,137,145,233,137,252,234,73,137,192,137,205,
  137,116,36,100,232,251,1,2,139,149,233,133,192,15,132,244,249,15,182,78,252,
  253,72,139,44,202,72,137,40,248,42,139,6,15,182,204,15,182,232,131,198,4,
  193,232,16,252,255,36,252,235,248,3,139,141,233,137,113,252,244,15,182,70,
  252,253,72,139,44,194,72,137,105,16,141,177,233,41,214,139,105,252,248,184,
  237,252,233,244,30,248,43,139,108,36,96,137,149,233,68,141,4,194,141,20,202,
  137,252,233,68,15,182,78,252,252,137,116,36,100,232,251,1,3,248,3,139,149,
  233,255,131,252,248,1,15,135,244,44,248,4,141,118,4,15,130,244,252,248,5,
  15,183,70,252,254,141,180,253,134,233,248,6,139,6,15,182,204,15,182,232,131,
  198,4,193,232,16,252,255,36,252,235,248,45,131,198,4,129,120,253,4,239,15,
  130,244,5,252,233,244,6,248,46,129,120,253,4,239,252,233,244,4,248,47,131,
  252,238,4,65,137,192,65,137,252,233,139,108,36,96,137,149,233,255,137,202,
  137,252,233,137,116,36,100,232,251,1,4,252,233,244,3,248,48,255,131,252,238,
  4,139,108,36,96,137,149,233,137,252,233,139,86,252,252,137,116,36,100,232,
  251,1,5,252,233,244,3,255,248,49,255,15,182,110,252,255,255,248,50,141,4,
  199,252,233,244,247,248,51,255,248,52,141,4,199,141,44,252,234,149,252,233,
  244,248,248,53,141,4,194,137,197,252,233,244,248,248,54,255,248,55,141,4,
  194,248,1,141,44,252,234,248,2,141,12,202,65,137,232,65,137,193,15,182,70,
  252,252,137,68,36,32,139,108,36,96,137,149,233,137,202,137,252,233,137,116,
  36,100,232,251,1,6,139,149,233,133,192,15,132,244,42,248,44,137,193,41,208,
  137,113,252,244,141,176,233,184,237,252,233,244,28,248,56,139,108,36,96,137,
  149,233,141,20,194,137,252,233,137,116,36,100,232,251,1,7,139,149,233,252,
  233,244,44,248,57,141,76,202,8,248,29,137,76,36,84,137,68,36,80,131,252,233,
  8,139,108,36,96,137,149,233,255,137,202,68,141,4,193,137,252,233,137,116,
  36,100,232,251,1,8,139,149,233,139,76,36,84,139,68,36,80,139,105,252,248,
  131,192,1,57,215,15,132,244,58,137,202,137,114,252,252,139,181,233,139,14,
  15,182,252,233,15,182,205,131,198,4,252,255,36,252,235,248,59,139,108,36,
  96,137,149,233,137,202,137,252,233,137,116,36,100,232,251,1,9,139,149,233,
  139,70,252,252,15,182,204,15,182,232,193,232,16,252,255,164,253,252,235,233,
  248,60,129,252,248,239,15,130,244,61,139,106,4,129,252,253,239,15,131,244,
  61,139,114,252,252,137,68,36,84,137,106,252,252,139,42,137,106,252,248,131,
  232,2,15,132,244,248,137,209,248,1,131,193,8,72,139,41,72,137,105,252,248,
  131,232,1,15,133,244,1,248,2,255,139,68,36,84,252,233,244,62,248,63,129,252,
  248,239,15,130,244,61,139,106,4,137,252,233,193,252,249,15,131,252,249,252,
  254,15,132,244,249,184,237,252,247,213,57,232,255,15,71,197,255,15,134,244,
  247,137,232,248,1,255,248,2,139,106,252,248,139,132,253,197,233,139,114,252,
  252,199,66,252,252,237,137,66,252,248,252,233,244,64,248,3,184,237,252,233,
  244,2,248,65,129,252,248,239,15,130,244,61,139,106,4,139,114,252,252,129,
  252,253,239,15,133,244,252,248,1,139,42,139,173,233,248,2,133,252,237,199,
  66,252,252,237,255,15,132,244,64,139,131,233,199,66,252,252,237,137,106,252,
  248,139,141,233,35,136,233,105,201,239,3,141,233,248,3,129,185,233,239,15,
  133,244,250,57,129,233,15,132,244,251,248,4,139,137,233,133,201,15,133,244,
  3,255,252,233,244,64,248,5,139,105,4,129,252,253,239,15,132,244,64,139,1,
  137,106,252,252,137,66,252,248,252,233,244,64,248,6,129,252,253,239,15,132,
  244,1,129,252,253,239,15,135,244,254,129,252,253,239,15,134,244,253,189,237,
  252,233,244,254,248,7,255,189,237,248,8,252,247,213,139,172,253,171,233,252,
  233,244,2,248,66,129,252,248,239,15,130,244,61,129,122,253,4,239,15,133,244,
  61,139,42,131,189,233,0,15,133,244,61,129,122,253,12,239,15,133,244,61,139,
  66,8,137,133,233,139,114,252,252,199,66,252,252,237,255,137,106,252,248,252,
  246,133,233,235,15,132,244,247,128,165,233,235,139,131,233,137,171,233,137,
  133,233,248,1,252,233,244,64,248,67,129,252,248,239,15,130,244,61,129,122,
  253,4,239,15,133,244,61,137,213,68,141,66,8,139,18,139,76,36,96,232,251,1,
  10,137,252,234,72,139,40,139,114,252,252,72,137,106,252,248,252,233,244,64,
  248,68,255,129,252,248,239,15,133,244,61,129,122,253,4,239,255,15,133,244,
  247,139,42,252,233,244,69,248,1,15,135,244,61,255,15,131,244,61,255,252,242,
  15,16,2,252,233,244,70,255,221,2,252,233,244,71,255,248,72,129,252,248,239,
  15,130,244,61,139,114,252,252,129,122,253,4,239,15,133,244,249,139,2,248,
  2,199,66,252,252,237,137,66,252,248,252,233,244,64,248,3,129,122,253,4,239,
  15,135,244,61,131,187,233,0,15,133,244,61,139,171,233,59,171,233,255,15,130,
  244,247,232,244,73,248,1,139,108,36,96,137,149,233,137,116,36,100,137,252,
  233,255,232,251,1,11,255,232,251,1,12,255,139,149,233,252,233,244,2,248,74,
  129,252,248,239,15,130,244,61,15,132,244,248,248,1,129,122,253,4,239,15,133,
  244,61,139,108,36,96,137,149,233,137,149,233,139,114,252,252,68,141,66,8,
  139,18,137,252,233,137,116,36,100,232,251,1,13,139,149,233,133,192,15,132,
  244,249,72,139,106,8,72,139,66,16,72,137,106,252,248,72,137,2,248,75,184,
  237,255,252,233,244,76,248,2,199,66,12,237,252,233,244,1,248,3,199,66,252,
  252,237,252,233,244,64,248,77,129,252,248,239,15,130,244,61,139,42,129,122,
  253,4,239,15,133,244,61,255,131,189,233,0,15,133,244,61,255,139,106,252,248,
  139,133,233,139,114,252,252,199,66,252,252,237,137,66,252,248,199,66,12,237,
  184,237,252,233,244,76,248,78,129,252,248,239,15,130,244,61,129,122,253,4,
  239,15,133,244,61,129,122,253,12,239,255,139,114,252,252,255,139,66,8,131,
  192,1,199,66,252,252,237,137,66,252,248,255,252,242,15,16,66,8,72,189,237,
  237,102,72,15,110,205,252,242,15,88,193,252,242,15,45,192,252,242,15,17,66,
  252,248,255,139,42,59,133,233,15,131,244,248,193,224,3,3,133,233,248,1,129,
  120,253,4,239,15,132,244,79,72,139,40,72,137,42,252,233,244,75,248,2,131,
  189,233,0,15,132,244,79,137,252,233,137,213,137,194,232,251,1,14,137,252,
  234,133,192,15,133,244,1,248,79,184,237,252,233,244,76,248,80,255,139,106,
  252,248,139,133,233,139,114,252,252,199,66,252,252,237,137,66,252,248,255,
  199,66,12,237,199,66,8,0,0,0,0,255,15,87,192,252,242,15,17,66,8,255,217,252,
  238,221,90,8,255,184,237,252,233,244,76,248,81,129,252,248,239,15,130,244,
  61,141,74,8,131,232,1,190,237,248,1,15,182,171,233,193,252,237,235,131,229,
  1,1,252,238,252,233,244,28,248,82,129,252,248,239,15,130,244,61,129,122,253,
  12,239,15,133,244,61,255,139,106,4,137,106,12,199,66,4,237,139,42,139,114,
  8,137,106,8,137,50,141,74,16,131,232,2,190,237,252,233,244,1,248,83,129,252,
  248,239,15,130,244,61,139,42,139,114,252,252,137,116,36,100,137,108,36,80,
  129,122,253,4,239,15,133,244,61,72,131,189,233,0,15,133,244,61,128,189,233,
  235,15,135,244,61,139,141,233,15,132,244,247,255,59,141,233,15,132,244,61,
  248,1,141,116,193,252,240,59,181,233,15,135,244,61,137,181,233,139,108,36,
  96,137,149,233,131,194,8,137,149,233,141,108,194,232,72,41,252,245,57,206,
  15,132,244,249,248,2,72,139,4,46,72,137,70,252,248,131,252,238,8,57,206,15,
  133,244,2,248,3,137,202,139,76,36,80,232,244,25,199,131,233,237,255,139,108,
  36,96,139,116,36,80,139,149,233,129,252,248,239,15,135,244,254,248,4,139,
  142,233,139,190,233,137,142,233,137,252,254,41,206,15,132,244,252,141,4,50,
  193,252,238,3,59,133,233,15,135,244,255,137,213,72,41,205,248,5,72,139,1,
  72,137,4,41,131,193,8,57,252,249,15,133,244,5,248,6,141,70,2,199,66,252,252,
  237,248,7,139,116,36,100,137,68,36,84,72,199,193,252,248,252,255,252,255,
  252,255,252,247,198,237,255,15,132,244,13,252,233,244,14,248,8,199,66,252,
  252,237,139,142,233,131,252,233,8,137,142,233,72,139,1,72,137,2,184,237,252,
  233,244,7,248,9,139,76,36,80,137,185,233,137,252,242,137,252,233,232,251,
  1,0,139,116,36,80,139,149,233,252,233,244,4,248,84,139,106,252,248,139,173,
  233,139,114,252,252,137,116,36,100,137,108,36,80,72,131,189,233,0,15,133,
  244,61,255,128,189,233,235,15,135,244,61,139,141,233,15,132,244,247,59,141,
  233,15,132,244,61,248,1,141,116,193,252,248,59,181,233,15,135,244,61,137,
  181,233,139,108,36,96,137,149,233,137,149,233,141,108,194,252,240,72,41,252,
  245,57,206,15,132,244,249,248,2,255,72,139,4,46,72,137,70,252,248,131,252,
  238,8,57,206,15,133,244,2,248,3,137,202,139,76,36,80,232,244,25,199,131,233,
  237,139,108,36,96,139,116,36,80,139,149,233,129,252,248,239,15,135,244,254,
  248,4,139,142,233,139,190,233,137,142,233,137,252,254,41,206,15,132,244,252,
  141,4,50,193,252,238,3,59,133,233,15,135,244,255,255,137,213,72,41,205,248,
  5,72,139,1,72,137,4,41,131,193,8,57,252,249,15,133,244,5,248,6,141,70,1,248,
  7,139,116,36,100,137,68,36,84,49,201,252,247,198,237,15,132,244,13,252,233,
  244,14,248,8,137,252,242,137,252,233,232,251,1,15,248,9,139,76,36,80,137,
  185,233,137,252,242,137,252,233,232,251,1,0,139,116,36,80,139,149,233,252,
  233,244,4,248,85,139,108,36,96,72,252,247,133,233,237,15,132,244,61,255,137,
  149,233,141,68,194,252,248,137,133,233,49,192,72,137,133,233,176,235,136,
  133,233,252,233,244,16,255,248,69,255,248,71,139,114,252,252,221,90,252,248,
  252,233,244,64,255,248,86,129,252,248,239,15,130,244,61,255,129,122,253,4,
  239,15,133,244,248,139,42,131,252,253,0,15,137,244,69,252,247,221,15,136,
  244,247,248,87,248,69,139,114,252,252,199,66,252,252,237,137,106,252,248,
  252,233,244,64,248,1,139,114,252,252,199,66,252,252,0,0,224,65,199,66,252,
  248,0,0,0,0,252,233,244,64,248,2,15,135,244,61,255,129,122,253,4,239,15,131,
  244,61,255,252,242,15,16,2,72,184,237,237,102,72,15,110,200,15,84,193,248,
  70,139,114,252,252,252,242,15,17,66,252,248,255,221,2,217,225,248,70,248,
  71,139,114,252,252,221,90,252,248,255,248,64,184,237,248,76,137,68,36,84,
  248,62,252,247,198,237,15,133,244,253,248,5,56,70,252,255,15,135,244,252,
  15,182,78,252,253,72,252,247,209,141,20,202,139,6,15,182,204,15,182,232,131,
  198,4,193,232,16,252,255,36,252,235,248,6,199,68,194,252,244,237,131,192,
  1,252,233,244,5,248,7,72,199,193,252,248,252,255,252,255,252,255,252,233,
  244,14,248,88,255,129,122,253,4,239,15,133,244,247,139,42,252,233,244,69,
  248,1,15,135,244,61,255,252,242,15,16,2,232,244,89,255,252,242,15,45,232,
  129,252,253,0,0,0,128,15,133,244,69,252,242,15,42,205,102,15,46,193,15,138,
  244,70,15,132,244,69,255,221,2,232,244,89,255,248,90,255,252,242,15,16,2,
  232,244,91,255,221,2,232,244,91,255,248,92,129,252,248,239,15,130,244,61,
  129,122,253,4,239,15,131,244,61,252,242,15,81,2,252,233,244,70,255,248,92,
  129,252,248,239,15,130,244,61,129,122,253,4,239,15,131,244,61,221,2,217,252,
  250,252,233,244,71,255,248,93,129,252,248,239,15,130,244,61,129,122,253,4,
  239,15,131,244,61,217,252,237,221,2,217,252,241,252,233,244,71,248,94,129,
  252,248,239,15,130,244,61,129,122,253,4,239,15,131,244,61,217,252,236,221,
  2,217,252,241,252,233,244,71,248,95,129,252,248,239,255,15,130,244,61,129,
  122,253,4,239,15,131,244,61,221,2,232,244,96,252,233,244,71,248,97,129,252,
  248,239,15,130,244,61,129,122,253,4,239,15,131,244,61,221,2,217,252,254,252,
  233,244,71,248,98,129,252,248,239,255,15,130,244,61,129,122,253,4,239,15,
  131,244,61,221,2,217,252,255,252,233,244,71,248,99,129,252,248,239,15,130,
  244,61,129,122,253,4,239,15,131,244,61,221,2,217,252,242,221,216,252,233,
  244,71,248,100,129,252,248,239,15,130,244,61,255,129,122,253,4,239,15,131,
  244,61,221,2,217,192,216,200,217,232,222,225,217,252,250,217,252,243,252,
  233,244,71,248,101,129,252,248,239,15,130,244,61,129,122,253,4,239,15,131,
  244,61,221,2,217,192,216,200,217,232,222,225,217,252,250,217,201,217,252,
  243,252,233,244,71,248,102,129,252,248,239,15,130,244,61,129,122,253,4,239,
  15,131,244,61,255,221,2,217,232,217,252,243,252,233,244,71,255,248,103,129,
  252,248,239,15,130,244,61,129,122,253,4,239,15,131,244,61,252,242,15,16,2,
  255,137,213,232,251,1,16,137,252,234,252,233,244,70,255,248,104,129,252,248,
  239,15,130,244,61,129,122,253,4,239,15,131,244,61,252,242,15,16,2,255,137,
  213,232,251,1,17,137,252,234,252,233,244,70,255,248,105,129,252,248,239,15,
  130,244,61,129,122,253,4,239,15,131,244,61,252,242,15,16,2,255,137,213,232,
  251,1,18,137,252,234,252,233,244,70,248,106,255,248,107,129,252,248,239,15,
  130,244,61,129,122,253,4,239,15,131,244,61,252,242,15,16,2,139,106,252,248,
  252,242,15,89,133,233,252,233,244,70,255,248,107,129,252,248,239,15,130,244,
  61,129,122,253,4,239,15,131,244,61,221,2,139,106,252,248,220,141,233,252,
  233,244,71,255,248,108,129,252,248,239,15,130,244,61,129,122,253,4,239,15,
  131,244,61,129,122,253,12,239,15,131,244,61,221,2,221,66,8,217,252,243,252,
  233,244,71,248,109,129,252,248,239,15,130,244,61,129,122,253,4,239,15,131,
  244,61,129,122,253,12,239,255,15,131,244,61,221,66,8,221,2,217,252,253,221,
  217,252,233,244,71,248,110,129,252,248,239,15,130,244,61,139,106,4,129,252,
  253,239,15,131,244,61,139,114,252,252,139,2,137,106,252,252,137,66,252,248,
  209,229,129,252,253,0,0,224,252,255,15,131,244,249,9,232,15,132,244,249,184,
  252,254,3,0,0,129,252,253,0,0,32,0,15,130,244,250,248,1,193,252,237,21,41,
  197,255,252,242,15,42,197,255,137,108,36,80,219,68,36,80,255,139,106,252,
  252,129,229,252,255,252,255,15,128,129,205,0,0,224,63,137,106,252,252,248,
  2,255,252,242,15,17,2,255,221,26,255,184,237,252,233,244,76,248,3,255,15,
  87,192,252,233,244,2,255,217,252,238,252,233,244,2,255,248,4,255,252,242,
  15,16,2,72,189,237,237,102,72,15,110,205,252,242,15,89,193,252,242,15,17,
  66,252,248,255,221,2,199,68,36,80,0,0,128,90,216,76,36,80,221,90,252,248,
  255,139,106,252,252,184,52,4,0,0,209,229,252,233,244,1,255,248,111,129,252,
  248,239,15,130,244,61,129,122,253,4,239,15,131,244,61,252,242,15,16,2,255,
  248,111,129,252,248,239,15,130,244,61,129,122,253,4,239,15,131,244,61,221,
  2,255,139,106,4,139,114,252,252,209,229,129,252,253,0,0,224,252,255,15,132,
  244,250,255,15,40,224,232,244,112,252,242,15,92,224,248,1,252,242,15,17,66,
  252,248,252,242,15,17,34,255,217,192,232,244,112,220,252,233,248,1,221,90,
  252,248,221,26,255,139,66,252,252,139,106,4,49,232,15,136,244,249,248,2,184,
  237,252,233,244,76,248,3,129,252,245,0,0,0,128,137,106,4,252,233,244,2,248,
  4,255,15,87,228,252,233,244,1,255,217,252,238,217,201,252,233,244,1,255,248,
  113,129,252,248,239,15,130,244,61,129,122,253,4,239,15,131,244,61,129,122,
  253,12,239,15,131,244,61,221,66,8,221,2,248,1,217,252,248,223,224,158,15,
  138,244,1,221,217,252,233,244,71,255,248,114,129,252,248,239,15,130,244,61,
  129,122,253,4,239,15,131,244,61,129,122,253,12,239,15,131,244,61,252,242,
  15,16,2,252,242,15,16,74,8,232,244,115,252,233,244,70,255,248,114,129,252,
  248,239,15,130,244,61,129,122,253,4,239,15,131,244,61,129,122,253,12,239,
  15,131,244,61,221,2,221,66,8,232,244,115,252,233,244,71,255,248,116,185,2,
  0,0,0,129,122,253,4,239,255,15,133,244,250,139,42,248,1,57,193,15,131,244,
  69,129,124,253,202,252,252,239,15,133,244,249,59,108,202,252,248,15,79,108,
  202,252,248,131,193,1,252,233,244,1,248,3,15,135,244,61,255,252,233,244,252,
  248,4,15,135,244,61,255,252,242,15,16,2,248,5,57,193,15,131,244,70,129,124,
  253,202,252,252,239,255,15,130,244,252,15,135,244,61,252,242,15,42,76,202,
  252,248,252,233,244,253,255,248,6,252,242,15,16,76,202,252,248,248,7,252,
  242,15,93,193,131,193,1,252,233,244,5,255,248,117,185,2,0,0,0,129,122,253,
  4,239,255,15,133,244,250,139,42,248,1,57,193,15,131,244,69,129,124,253,202,
  252,252,239,15,133,244,249,59,108,202,252,248,15,76,108,202,252,248,131,193,
  1,252,233,244,1,248,3,15,135,244,61,255,248,6,252,242,15,16,76,202,252,248,
  248,7,252,242,15,95,193,131,193,1,252,233,244,5,255,248,9,221,216,252,233,
  244,61,255,248,118,129,252,248,239,15,130,244,61,129,122,253,4,239,15,133,
  244,61,139,42,255,139,173,233,252,233,244,69,255,252,242,15,42,133,233,252,
  233,244,70,255,219,133,233,252,233,244,71,255,248,119,129,252,248,239,15,
  133,244,61,129,122,253,4,239,15,133,244,61,139,42,139,114,252,252,131,189,
  233,1,15,130,244,79,15,182,173,233,255,252,242,15,42,197,252,233,244,70,255,
  137,108,36,80,219,68,36,80,252,233,244,71,255,248,120,139,171,233,59,171,
  233,15,130,244,247,232,244,73,248,1,129,252,248,239,15,133,244,61,129,122,
  253,4,239,255,15,133,244,61,139,42,129,252,253,252,255,0,0,0,15,135,244,61,
  137,108,36,84,255,15,131,244,61,252,242,15,44,42,129,252,253,252,255,0,0,
  0,15,135,244,61,137,108,36,84,255,15,131,244,61,221,2,219,92,36,84,129,124,
  36,84,252,255,0,0,0,15,135,244,61,255,199,68,36,32,1,0,0,0,72,141,68,36,84,
  248,121,139,108,36,96,137,149,233,68,139,68,36,32,72,137,194,137,252,233,
  137,116,36,100,232,251,1,19,139,149,233,139,114,252,252,199,66,252,252,237,
  137,66,252,248,252,233,244,64,248,122,139,171,233,59,171,233,15,130,244,247,
  232,244,73,248,1,199,68,36,84,252,255,252,255,252,255,252,255,129,252,248,
  239,15,130,244,61,15,134,244,247,129,122,253,20,239,255,15,133,244,61,139,
  106,16,137,108,36,84,255,15,131,244,61,252,242,15,44,106,16,137,108,36,84,
  255,15,131,244,61,221,66,16,219,92,36,84,255,248,1,129,122,253,4,239,15,133,
  244,61,129,122,253,12,239,255,139,42,137,108,36,32,139,173,233,255,139,74,
  8,255,252,242,15,44,74,8,255,139,68,36,84,57,197,15,130,244,251,248,2,133,
  201,15,142,244,253,248,3,139,108,36,32,41,200,15,140,244,123,141,172,253,
  13,233,131,192,1,248,4,137,68,36,32,137,232,252,233,244,121,248,5,15,140,
  244,252,141,68,40,1,252,233,244,2,248,6,137,232,252,233,244,2,248,7,255,15,
  132,244,254,1,252,233,131,193,1,15,143,244,3,248,8,185,1,0,0,0,252,233,244,
  3,248,123,49,192,252,233,244,4,248,124,129,252,248,239,15,130,244,61,139,
  171,233,59,171,233,15,130,244,247,232,244,73,248,1,255,129,122,253,4,239,
  15,133,244,61,129,122,253,12,239,139,42,255,15,133,244,61,139,66,8,255,15,
  131,244,61,252,242,15,44,66,8,255,15,131,244,61,221,66,8,219,92,36,84,139,
  68,36,84,255,133,192,15,142,244,123,131,189,233,1,15,130,244,123,15,133,244,
  125,57,131,233,15,130,244,125,15,182,141,233,139,171,233,137,68,36,32,248,
  1,136,77,0,131,197,1,131,232,1,15,133,244,1,139,131,233,252,233,244,121,248,
  126,129,252,248,239,255,15,130,244,61,139,171,233,59,171,233,15,130,244,247,
  232,244,73,248,1,129,122,253,4,239,15,133,244,61,139,42,139,133,233,133,192,
  15,132,244,123,57,131,233,15,130,244,127,129,197,239,137,116,36,84,137,68,
  36,32,139,179,233,248,1,255,15,182,77,0,131,197,1,131,232,1,136,12,6,15,133,
  244,1,137,252,240,139,116,36,84,252,233,244,121,248,128,129,252,248,239,15,
  130,244,61,139,171,233,59,171,233,15,130,244,247,232,244,73,248,1,129,122,
  253,4,239,15,133,244,61,139,42,139,133,233,57,131,233,255,15,130,244,127,
  129,197,239,137,116,36,84,137,68,36,32,139,179,233,252,233,244,249,248,1,
  15,182,76,5,0,131,252,249,65,15,130,244,248,131,252,249,90,15,135,244,248,
  131,252,241,32,248,2,136,12,6,248,3,131,232,1,15,137,244,1,137,252,240,139,
  116,36,84,252,233,244,121,248,129,129,252,248,239,15,130,244,61,255,139,171,
  233,59,171,233,15,130,244,247,232,244,73,248,1,129,122,253,4,239,15,133,244,
  61,139,42,139,133,233,57,131,233,15,130,244,127,129,197,239,137,116,36,84,
  137,68,36,32,139,179,233,252,233,244,249,248,1,15,182,76,5,0,131,252,249,
  97,15,130,244,248,255,131,252,249,122,15,135,244,248,131,252,241,32,248,2,
  136,12,6,248,3,131,232,1,15,137,244,1,137,252,240,139,116,36,84,252,233,244,
  121,248,130,129,252,248,239,15,130,244,61,129,122,253,4,239,15,133,244,61,
  137,213,139,10,232,251,1,20,137,252,234,255,137,197,252,233,244,69,255,252,
  242,15,42,192,252,233,244,70,255,248,131,129,122,253,4,239,255,15,133,244,
  247,139,42,252,233,244,87,248,1,15,135,244,61,255,252,242,15,16,2,72,189,
  237,237,102,72,15,110,205,252,242,15,88,193,102,15,126,197,255,252,233,244,
  87,255,248,132,255,72,189,237,237,102,72,15,110,205,255,199,68,36,80,0,0,
  192,89,255,15,133,244,247,139,42,252,233,244,248,248,1,15,135,244,61,255,
  252,242,15,16,2,252,242,15,88,193,102,15,126,197,255,248,2,137,68,36,84,141,
  68,194,252,240,248,1,57,208,15,134,244,87,129,120,253,4,239,255,15,133,244,
  248,35,40,131,232,8,252,233,244,1,248,2,15,135,244,133,255,15,131,244,133,
  255,252,242,15,16,0,252,242,15,88,193,102,15,126,193,33,205,255,131,232,8,
  252,233,244,1,248,134,255,15,133,244,248,11,40,131,232,8,252,233,244,1,248,
  2,15,135,244,133,255,252,242,15,16,0,252,242,15,88,193,102,15,126,193,9,205,
  255,131,232,8,252,233,244,1,248,135,255,15,133,244,248,51,40,131,232,8,252,
  233,244,1,248,2,15,135,244,133,255,252,242,15,16,0,252,242,15,88,193,102,
  15,126,193,49,205,255,131,232,8,252,233,244,1,248,136,129,122,253,4,239,255,
  248,2,15,205,252,233,244,87,248,137,129,122,253,4,239,255,248,2,252,247,213,
  255,248,87,252,242,15,42,197,252,233,244,70,255,248,133,139,68,36,84,252,
  233,244,61,255,248,138,129,122,253,4,239,255,248,2,129,122,253,12,239,15,
  133,244,61,139,74,8,255,248,138,129,252,248,239,15,130,244,61,129,122,253,
  4,239,15,131,244,61,129,122,253,12,239,15,131,244,61,252,242,15,16,2,252,
  242,15,16,74,8,72,189,237,237,102,72,15,110,213,252,242,15,88,194,252,242,
  15,88,202,102,15,126,197,102,15,126,201,255,211,229,252,233,244,87,255,248,
  139,129,122,253,4,239,255,248,139,129,252,248,239,15,130,244,61,129,122,253,
  4,239,15,131,244,61,129,122,253,12,239,15,131,244,61,252,242,15,16,2,252,
  242,15,16,74,8,72,189,237,237,102,72,15,110,213,252,242,15,88,194,252,242,
  15,88,202,102,15,126,197,102,15,126,201,255,211,252,237,252,233,244,87,255,
  248,140,129,122,253,4,239,255,248,140,129,252,248,239,15,130,244,61,129,122,
  253,4,239,15,131,244,61,129,122,253,12,239,15,131,244,61,252,242,15,16,2,
  252,242,15,16,74,8,72,189,237,237,102,72,15,110,213,252,242,15,88,194,252,
  242,15,88,202,102,15,126,197,102,15,126,201,255,211,252,253,252,233,244,87,
  255,248,141,129,122,253,4,239,255,248,141,129,252,248,239,15,130,244,61,129,
  122,253,4,239,15,131,244,61,129,122,253,12,239,15,131,244,61,252,242,15,16,
  2,252,242,15,16,74,8,72,189,237,237,102,72,15,110,213,252,242,15,88,194,252,
  242,15,88,202,102,15,126,197,102,15,126,201,255,211,197,252,233,244,87,255,
  248,142,129,122,253,4,239,255,248,142,129,252,248,239,15,130,244,61,129,122,
  253,4,239,15,131,244,61,129,122,253,12,239,15,131,244,61,252,242,15,16,2,
  252,242,15,16,74,8,72,189,237,237,102,72,15,110,213,252,242,15,88,194,252,
  242,15,88,202,102,15,126,197,102,15,126,201,255,211,205,252,233,244,87,248,
  125,184,237,252,233,244,61,248,127,184,237,248,61,139,108,36,96,139,114,252,
  252,137,116,36,100,137,149,233,141,68,194,252,248,141,136,233,137,133,233,
  139,66,252,248,59,141,233,15,135,244,251,137,252,233,252,255,144,233,139,
  149,233,133,192,15,143,244,76,248,1,255,139,141,233,41,209,193,252,233,3,
  133,192,141,65,1,139,106,252,248,15,133,244,32,139,181,233,139,14,15,182,
  252,233,15,182,205,131,198,4,252,255,36,252,235,248,32,137,209,252,247,198,
  237,15,133,244,249,15,182,110,252,253,72,252,247,213,141,20,252,234,252,233,
  244,28,248,3,137,252,245,131,229,252,248,41,252,234,252,233,244,28,248,5,
  186,237,137,252,233,232,251,1,0,139,149,233,49,192,252,233,244,1,248,73,93,
  72,137,108,36,32,139,108,36,96,137,116,36,100,137,149,233,255,141,68,194,
  252,248,137,252,233,137,133,233,232,251,1,21,139,149,233,139,133,233,41,208,
  193,232,3,131,192,1,72,139,108,36,32,85,195,248,143,255,15,182,131,233,168,
  235,15,133,244,251,168,235,15,133,244,247,168,235,15,132,244,247,252,255,
  139,233,252,233,244,247,255,248,144,15,182,131,233,168,235,15,133,244,251,
  252,233,244,247,248,145,15,182,131,233,168,235,15,133,244,251,168,235,15,
  132,244,251,252,255,139,233,15,132,244,247,168,235,15,132,244,251,248,1,255,
  139,108,36,96,137,149,233,137,252,242,137,252,233,232,251,1,22,248,3,139,
  149,233,248,4,15,182,78,252,253,248,5,15,182,110,252,252,15,183,70,252,254,
  252,255,164,253,252,235,233,248,146,131,198,4,139,77,232,137,76,36,84,252,
  233,244,4,248,147,255,139,106,252,248,139,173,233,15,182,133,233,141,4,194,
  139,108,36,96,137,149,233,137,133,233,137,252,242,141,139,233,72,137,171,
  233,137,116,36,100,232,251,1,23,252,233,244,3,255,248,148,137,116,36,100,
  255,248,149,255,137,116,36,100,131,206,1,248,1,255,141,68,194,252,248,139,
  108,36,96,137,149,233,137,133,233,137,252,242,137,252,233,232,251,1,24,199,
  68,36,100,0,0,0,0,255,131,230,252,254,255,139,149,233,72,137,193,139,133,
  233,41,208,72,137,205,15,182,78,252,253,193,232,3,131,192,1,252,255,229,248,
  150,255,65,85,65,84,65,83,65,82,65,81,65,80,87,86,85,72,141,108,36,88,85,
  83,82,81,80,15,182,69,252,248,138,101,252,240,76,137,125,252,248,76,137,117,
  252,240,139,93,0,139,139,233,199,131,233,237,137,131,233,137,139,233,72,129,
  252,236,239,72,131,197,128,252,242,68,15,17,125,252,248,252,242,68,15,17,
  117,252,240,252,242,68,15,17,109,232,252,242,68,15,17,101,224,252,242,68,
  15,17,93,216,252,242,68,15,17,85,208,252,242,68,15,17,77,200,252,242,68,15,
  17,69,192,252,242,15,17,125,184,252,242,15,17,117,176,252,242,15,17,109,168,
  252,242,15,17,101,160,252,242,15,17,93,152,252,242,15,17,85,144,252,242,15,
  17,77,136,252,242,15,17,69,128,139,171,233,139,147,233,72,137,171,233,199,
  131,233,0,0,0,0,137,149,233,72,141,148,253,36,233,141,139,233,232,251,1,25,
  72,139,141,233,72,129,225,239,137,169,233,139,149,233,139,177,233,252,233,
  244,247,255,248,151,255,72,141,140,253,36,233,248,1,102,68,15,111,185,233,
  102,68,15,111,177,233,102,68,15,111,169,233,102,68,15,111,161,233,102,68,
  15,111,153,233,102,68,15,111,145,233,102,68,15,111,137,233,102,68,15,111,
  129,233,102,15,111,185,233,72,137,204,102,15,111,49,76,139,124,36,16,76,139,
  116,36,24,76,139,108,36,32,76,139,100,36,80,133,192,15,136,244,249,137,68,
  36,84,139,122,252,248,139,191,233,139,191,233,199,131,233,0,0,0,0,199,131,
  233,237,139,6,15,182,204,15,182,232,131,198,4,193,232,16,129,252,253,239,
  15,130,244,248,255,139,68,36,84,248,2,252,255,36,252,235,248,3,252,247,216,
  137,252,233,137,194,232,251,1,26,255,248,89,255,217,124,36,4,137,68,36,8,
  102,184,0,4,102,11,68,36,4,102,37,252,255,252,247,102,137,68,36,6,217,108,
  36,6,217,252,252,217,108,36,4,139,68,36,8,195,255,248,152,72,184,237,237,
  102,72,15,110,208,72,184,237,237,102,72,15,110,216,15,40,200,102,15,84,202,
  102,15,46,217,15,134,244,247,102,15,85,208,252,242,15,88,203,252,242,15,92,
  203,102,15,86,202,72,184,237,237,102,72,15,110,208,252,242,15,194,193,1,102,
  15,84,194,252,242,15,92,200,15,40,193,248,1,195,248,91,255,217,124,36,4,137,
  68,36,8,102,184,0,8,102,11,68,36,4,102,37,252,255,252,251,102,137,68,36,6,
  217,108,36,6,217,252,252,217,108,36,4,139,68,36,8,195,255,248,153,72,184,
  237,237,102,72,15,110,208,72,184,237,237,102,72,15,110,216,15,40,200,102,
  15,84,202,102,15,46,217,15,134,244,247,102,15,85,208,252,242,15,88,203,252,
  242,15,92,203,102,15,86,202,72,184,237,237,102,72,15,110,208,252,242,15,194,
  193,6,102,15,84,194,252,242,15,92,200,15,40,193,248,1,195,248,112,255,217,
  124,36,4,137,68,36,8,102,184,0,12,102,11,68,36,4,102,137,68,36,6,217,108,
  36,6,217,252,252,217,108,36,4,139,68,36,8,195,255,248,154,72,184,237,237,
  102,72,15,110,208,72,184,237,237,102,72,15,110,216,15,40,200,102,15,84,202,
  102,15,46,217,15,134,244,247,102,15,85,208,15,40,193,252,242,15,88,203,252,
  242,15,92,203,72,184,237,237,102,72,15,110,216,252,242,15,194,193,1,102,15,
  84,195,252,242,15,92,200,102,15,86,202,15,40,193,248,1,195,248,155,255,15,
  40,232,252,242,15,94,193,72,184,237,237,102,72,15,110,208,72,184,237,237,
  102,72,15,110,216,15,40,224,102,15,84,226,102,15,46,220,15,134,244,247,102,
  15,85,208,252,242,15,88,227,252,242,15,92,227,102,15,86,226,72,184,237,237,
  102,72,15,110,208,252,242,15,194,196,1,102,15,84,194,252,242,15,92,224,15,
  40,197,252,242,15,89,204,252,242,15,92,193,195,248,1,252,242,15,89,200,15,
  40,197,252,242,15,92,193,195,255,217,193,216,252,241,217,124,36,4,102,184,
  0,4,102,11,68,36,4,102,37,252,255,252,247,102,137,68,36,6,217,108,36,6,217,
  252,252,217,108,36,4,222,201,222,252,233,195,255,248,96,217,252,234,222,201,
  248,156,217,84,36,8,129,124,36,8,0,0,128,127,15,132,244,247,129,124,36,8,
  0,0,128,252,255,15,132,244,248,248,157,217,192,217,252,252,220,252,233,217,
  201,217,252,240,217,232,222,193,217,252,253,221,217,248,1,195,248,2,221,216,
  217,252,238,195,255,248,115,255,248,158,252,242,15,45,193,252,242,15,42,208,
  102,15,46,202,15,133,244,254,15,138,244,255,248,159,131,252,248,1,15,142,
  244,252,248,1,169,1,0,0,0,15,133,244,248,252,242,15,89,192,209,232,252,233,
  244,1,248,2,209,232,15,132,244,251,15,40,200,248,3,252,242,15,89,192,209,
  232,15,132,244,250,15,131,244,3,255,252,242,15,89,200,252,233,244,3,248,4,
  252,242,15,89,193,248,5,195,248,6,15,132,244,5,15,130,244,253,252,247,216,
  232,244,1,72,184,237,237,102,72,15,110,200,252,242,15,94,200,15,40,193,195,
  248,7,72,184,237,237,102,72,15,110,192,195,248,8,102,72,15,126,200,72,209,
  224,72,193,192,12,72,61,252,254,15,0,0,15,132,244,248,102,72,15,126,192,72,
  209,224,15,132,244,250,255,72,193,192,12,72,61,252,254,15,0,0,15,132,244,
  251,252,242,15,17,76,36,16,252,242,15,17,68,36,8,221,68,36,16,221,68,36,8,
  217,252,241,217,192,217,252,252,220,252,233,217,201,217,252,240,217,232,222,
  193,217,252,253,221,217,221,92,36,8,252,242,15,16,68,36,8,195,248,9,72,184,
  237,237,102,72,15,110,208,102,15,46,194,15,132,244,247,15,40,193,248,1,195,
  248,2,72,184,237,237,102,72,15,110,208,102,15,84,194,72,184,237,237,102,72,
  15,110,208,102,15,46,194,15,132,244,1,102,15,80,193,15,87,192,136,196,15,
  146,208,48,224,15,133,244,1,248,3,72,184,237,237,255,102,72,15,110,192,195,
  248,4,102,15,80,193,133,192,15,133,244,3,15,87,192,195,248,5,102,15,80,193,
  133,192,15,132,244,3,15,87,192,195,248,160,255,131,252,250,1,15,130,244,89,
  15,132,244,91,131,252,250,3,15,130,244,112,15,135,244,248,252,242,15,81,192,
  195,248,2,252,242,15,17,68,36,8,221,68,36,8,131,252,250,5,15,135,244,248,
  88,15,132,244,247,232,244,96,80,252,233,244,253,248,1,232,244,156,255,80,
  252,233,244,253,248,2,131,252,250,7,15,132,244,247,15,135,244,248,217,252,
  237,217,201,217,252,241,252,233,244,253,248,1,217,232,217,201,217,252,241,
  252,233,244,253,248,2,131,252,250,9,15,132,244,247,15,135,244,248,217,252,
  236,217,201,217,252,241,252,233,244,253,248,1,255,217,252,254,252,233,244,
  253,248,2,131,252,250,11,15,132,244,247,15,135,244,255,217,252,255,252,233,
  244,253,248,1,217,252,242,221,216,248,7,221,92,36,8,252,242,15,16,68,36,8,
  195,255,139,84,36,12,221,68,36,4,131,252,250,1,15,130,244,89,15,132,244,91,
  131,252,250,3,15,130,244,112,15,135,244,248,217,252,250,195,248,2,131,252,
  250,5,15,130,244,96,15,132,244,156,131,252,250,7,15,132,244,247,15,135,244,
  248,217,252,237,217,201,217,252,241,195,248,1,217,232,217,201,217,252,241,
  195,248,2,131,252,250,9,15,132,244,247,255,15,135,244,248,217,252,236,217,
  201,217,252,241,195,248,1,217,252,254,195,248,2,131,252,250,11,15,132,244,
  247,15,135,244,255,217,252,255,195,248,1,217,252,242,221,216,195,255,248,
  9,204,255,248,161,255,65,131,252,248,1,15,132,244,247,15,135,244,248,252,
  242,15,88,193,195,248,1,252,242,15,92,193,195,248,2,65,131,252,248,3,15,132,
  244,247,15,135,244,248,252,242,15,89,193,195,248,1,252,242,15,94,193,195,
  248,2,65,131,252,248,5,15,130,244,155,15,132,244,115,65,131,252,248,7,15,
  132,244,247,15,135,244,248,72,184,237,237,255,102,72,15,110,200,15,87,193,
  195,248,1,72,184,237,237,102,72,15,110,200,15,84,193,195,248,2,65,131,252,
  248,9,15,135,244,248,252,242,15,17,68,36,8,252,242,15,17,76,36,16,221,68,
  36,8,221,68,36,16,15,132,244,247,217,252,243,248,7,221,92,36,8,252,242,15,
  16,68,36,8,195,248,1,217,201,217,252,253,221,217,252,233,244,7,248,2,65,131,
  252,248,11,15,132,244,247,15,135,244,255,252,242,15,93,193,195,248,1,252,
  242,15,95,193,195,248,9,204,255,139,68,36,20,221,68,36,4,221,68,36,12,131,
  252,248,1,15,132,244,247,15,135,244,248,222,193,195,248,1,222,252,233,195,
  248,2,131,252,248,3,15,132,244,247,15,135,244,248,222,201,195,248,1,222,252,
  249,195,248,2,131,252,248,5,15,130,244,155,15,132,244,115,131,252,248,7,15,
  132,244,247,15,135,244,248,255,221,216,217,224,195,248,1,221,216,217,225,
  195,248,2,131,252,248,9,15,132,244,247,15,135,244,248,217,252,243,195,248,
  1,217,201,217,252,253,221,217,195,248,2,131,252,248,11,15,132,244,247,15,
  135,244,255,255,219,252,233,219,209,221,217,195,248,1,219,252,233,218,209,
  221,217,195,255,221,225,223,224,252,246,196,1,15,132,244,248,217,201,248,
  2,221,216,195,248,1,221,225,223,224,252,246,196,1,15,133,244,248,217,201,
  248,2,221,216,195,255,248,162,137,200,86,72,137,214,83,15,162,137,6,137,94,
  4,137,78,8,137,86,12,91,94,195,248,163,255,85,72,137,229,83,72,137,203,139,
  131,233,72,41,196,255,15,182,139,233,131,252,233,1,15,136,244,248,248,1,72,
  139,132,253,203,233,72,137,132,253,204,233,131,252,233,1,15,137,244,1,248,
  2,15,182,131,233,72,139,139,233,72,139,147,233,76,139,131,233,76,139,139,
  233,133,192,15,132,244,251,15,40,131,233,15,40,139,233,15,40,147,233,15,40,
  155,233,248,5,255,252,255,147,233,72,137,131,233,15,41,131,233,255,72,139,
  93,252,248,201,195,255,248,164,255,249,255,129,124,253,202,4,239,15,133,244,
  253,129,124,253,194,4,239,15,133,244,254,139,44,202,131,198,4,59,44,194,255,
  15,141,244,255,255,15,140,244,255,255,15,143,244,255,255,15,142,244,255,255,
  248,6,15,183,70,252,254,141,180,253,134,233,248,9,139,6,15,182,204,15,182,
  232,131,198,4,193,232,16,252,255,36,252,235,248,7,15,135,244,43,129,124,253,
  194,4,239,15,130,244,247,15,133,244,43,255,252,242,15,42,4,194,252,233,244,
  248,255,221,4,202,219,4,194,252,233,244,249,255,248,8,15,135,244,43,255,252,
  242,15,42,12,202,252,242,15,16,4,194,131,198,4,102,15,46,193,255,15,134,244,
  9,255,15,135,244,9,255,15,130,244,9,255,15,131,244,9,255,252,233,244,6,255,
  219,4,202,252,233,244,248,255,129,124,253,202,4,239,15,131,244,43,129,124,
  253,194,4,239,15,131,244,43,255,248,1,252,242,15,16,4,194,248,2,131,198,4,
  102,15,46,4,202,248,3,255,248,1,221,4,202,248,2,221,4,194,248,3,131,198,4,
  255,223,252,233,221,216,255,218,252,233,223,224,158,255,15,134,244,247,255,
  15,135,244,247,255,15,130,244,247,255,15,131,244,247,255,15,183,70,252,254,
  141,180,253,134,233,248,1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,
  252,255,36,252,235,255,139,108,194,4,131,198,4,255,129,252,253,239,15,133,
  244,253,129,124,253,202,4,239,15,133,244,254,139,44,194,59,44,202,255,15,
  133,244,255,255,15,132,244,255,255,15,183,70,252,254,141,180,253,134,233,
  248,9,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,
  248,7,15,135,244,251,129,124,253,202,4,239,15,130,244,247,15,133,244,251,
  255,252,242,15,42,4,202,255,219,4,202,255,252,233,244,248,248,8,15,135,244,
  251,255,252,242,15,42,4,194,102,15,46,4,202,255,219,4,194,221,4,202,255,252,
  233,244,250,255,129,252,253,239,15,131,244,251,129,124,253,202,4,239,15,131,
  244,251,255,248,1,252,242,15,16,4,202,248,2,102,15,46,4,194,248,4,255,248,
  1,221,4,202,248,2,221,4,194,248,4,255,15,138,244,248,15,133,244,248,255,15,
  138,244,248,15,132,244,247,255,248,1,15,183,70,252,254,141,180,253,134,233,
  248,2,255,248,2,15,183,70,252,254,141,180,253,134,233,248,1,255,252,233,244,
  9,255,129,252,253,239,15,132,244,48,129,124,253,202,4,239,15,132,244,48,255,
  57,108,202,4,15,133,244,2,129,252,253,239,15,131,244,1,139,12,202,139,4,194,
  57,193,15,132,244,1,129,252,253,239,15,135,244,2,139,169,233,133,252,237,
  15,132,244,2,252,246,133,233,235,15,133,244,2,255,49,252,237,255,189,1,0,
  0,0,255,252,233,244,47,255,248,3,129,252,253,239,255,15,133,244,9,255,252,
  233,244,48,255,72,252,247,208,139,108,202,4,131,198,4,129,252,253,239,15,
  133,244,249,139,12,202,59,12,135,255,139,108,202,4,131,198,4,255,129,252,
  253,239,15,133,244,253,129,124,253,199,4,239,15,133,244,254,139,44,199,59,
  44,202,255,15,183,70,252,254,141,180,253,134,233,248,9,139,6,15,182,204,15,
  182,232,131,198,4,193,232,16,252,255,36,252,235,248,7,15,135,244,249,129,
  124,253,199,4,239,15,130,244,247,255,252,242,15,42,4,199,255,219,4,199,255,
  252,233,244,248,248,8,255,252,242,15,42,4,202,102,15,46,4,199,255,219,4,202,
  221,4,199,255,129,252,253,239,15,131,244,249,255,248,1,252,242,15,16,4,199,
  248,2,102,15,46,4,202,248,4,255,248,1,221,4,199,248,2,221,4,202,248,4,255,
  72,252,247,208,139,108,202,4,131,198,4,57,197,255,15,133,244,249,15,183,70,
  252,254,141,180,253,134,233,248,2,139,6,15,182,204,15,182,232,131,198,4,193,
  232,16,252,255,36,252,235,248,3,129,252,253,239,15,133,244,2,252,233,244,
  48,255,15,132,244,248,129,252,253,239,15,132,244,48,15,183,70,252,254,141,
  180,253,134,233,248,2,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,252,235,255,139,108,194,4,131,198,4,129,252,253,239,255,137,108,202,
  4,139,44,194,137,44,202,255,72,139,44,194,72,137,44,202,139,6,15,182,204,
  15,182,232,131,198,4,193,232,16,252,255,36,252,235,255,49,252,237,129,124,
  253,194,4,239,129,213,239,137,108,202,4,139,6,15,182,204,15,182,232,131,198,
  4,193,232,16,252,255,36,252,235,255,129,124,253,194,4,239,15,133,244,251,
  139,44,194,252,247,221,15,128,244,250,199,68,202,4,237,137,44,202,248,9,139,
  6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,248,4,199,
  68,202,4,0,0,224,65,199,4,202,0,0,0,0,252,233,244,9,248,5,15,135,244,53,255,
  129,124,253,194,4,239,15,131,244,53,255,252,242,15,16,4,194,72,184,237,237,
  102,72,15,110,200,15,87,193,252,242,15,17,4,202,255,221,4,194,217,224,221,
  28,202,255,129,124,253,194,4,239,15,133,244,248,139,4,194,255,139,128,233,
  248,1,199,68,202,4,237,137,4,202,255,15,87,192,252,242,15,42,128,233,248,
  1,252,242,15,17,4,202,255,219,128,233,248,1,221,28,202,255,139,6,15,182,204,
  15,182,232,131,198,4,193,232,16,252,255,36,252,235,248,2,129,124,253,194,
  4,239,15,133,244,56,139,12,194,137,213,232,251,1,20,255,252,242,15,42,192,
  255,137,252,234,15,182,78,252,253,252,233,244,1,255,15,182,252,236,15,182,
  192,255,129,124,253,252,234,4,239,15,133,244,50,129,124,253,199,4,239,15,
  133,244,50,139,44,252,234,3,44,199,15,128,244,49,255,129,124,253,252,234,
  4,239,15,133,244,52,129,124,253,199,4,239,15,133,244,52,139,4,199,3,4,252,
  234,15,128,244,51,255,129,124,253,252,234,4,239,15,133,244,55,129,124,253,
  194,4,239,15,133,244,55,139,44,252,234,3,44,194,15,128,244,54,255,199,68,
  202,4,237,255,129,124,253,252,234,4,239,15,131,244,50,255,129,124,253,199,
  4,239,15,131,244,50,255,252,242,15,16,4,252,234,252,242,15,88,4,199,255,221,
  4,252,234,220,4,199,255,129,124,253,252,234,4,239,15,131,244,52,255,129,124,
  253,199,4,239,15,131,244,52,255,252,242,15,16,4,199,252,242,15,88,4,252,234,
  255,221,4,199,220,4,252,234,255,129,124,253,252,234,4,239,15,131,244,55,129,
  124,253,194,4,239,15,131,244,55,255,252,242,15,16,4,252,234,252,242,15,88,
  4,194,255,221,4,252,234,220,4,194,255,129,124,253,252,234,4,239,15,133,244,
  50,129,124,253,199,4,239,15,133,244,50,139,44,252,234,43,44,199,15,128,244,
  49,255,129,124,253,252,234,4,239,15,133,244,52,129,124,253,199,4,239,15,133,
  244,52,139,4,199,43,4,252,234,15,128,244,51,255,129,124,253,252,234,4,239,
  15,133,244,55,129,124,253,194,4,239,15,133,244,55,139,44,252,234,43,44,194,
  15,128,244,54,255,252,242,15,16,4,252,234,252,242,15,92,4,199,255,221,4,252,
  234,220,36,199,255,252,242,15,16,4,199,252,242,15,92,4,252,234,255,221,4,
  199,220,36,252,234,255,252,242,15,16,4,252,234,252,242,15,92,4,194,255,221,
  4,252,234,220,36,194,255,129,124,253,252,234,4,239,15,133,244,50,129,124,
  253,199,4,239,15,133,244,50,139,44,252,234,15,175,44,199,15,128,244,49,255,
  129,124,253,252,234,4,239,15,133,244,52,129,124,253,199,4,239,15,133,244,
  52,139,4,199,15,175,4,252,234,15,128,244,51,255,129,124,253,252,234,4,239,
  15,133,244,55,129,124,253,194,4,239,15,133,244,55,139,44,252,234,15,175,44,
  194,15,128,244,54,255,252,242,15,16,4,252,234,252,242,15,89,4,199,255,221,
  4,252,234,220,12,199,255,252,242,15,16,4,199,252,242,15,89,4,252,234,255,
  221,4,199,220,12,252,234,255,252,242,15,16,4,252,234,252,242,15,89,4,194,
  255,221,4,252,234,220,12,194,255,252,242,15,16,4,252,234,252,242,15,94,4,
  199,255,221,4,252,234,220,52,199,255,252,242,15,16,4,199,252,242,15,94,4,
  252,234,255,221,4,199,220,52,252,234,255,252,242,15,16,4,252,234,252,242,
  15,94,4,194,255,221,4,252,234,220,52,194,255,252,242,15,16,4,252,234,252,
  242,15,16,12,199,255,221,4,252,234,221,4,199,255,252,242,15,16,4,199,252,
  242,15,16,12,252,234,255,221,4,199,221,4,252,234,255,252,242,15,16,4,252,
  234,252,242,15,16,12,194,255,221,4,252,234,221,4,194,255,248,165,232,244,
  155,255,252,233,244,165,255,232,244,115,255,15,182,252,236,15,182,192,139,
  76,36,96,137,145,233,141,20,194,65,137,192,65,41,232,248,35,137,205,137,116,
  36,100,232,251,1,27,139,149,233,133,192,15,133,244,44,15,182,110,252,255,
  15,182,78,252,253,72,139,4,252,234,72,137,4,202,139,6,15,182,204,15,182,232,
  131,198,4,193,232,16,252,255,36,252,235,255,72,252,247,208,139,4,135,199,
  68,202,4,237,137,4,202,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,252,235,255,15,191,192,199,68,202,4,237,137,4,202,255,15,191,192,252,
  242,15,42,192,252,242,15,17,4,202,255,223,70,252,254,221,28,202,255,252,242,
  15,16,4,199,252,242,15,17,4,202,255,221,4,199,221,28,202,255,72,252,247,208,
  137,68,202,4,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,
  252,235,255,141,76,202,12,141,68,194,4,189,237,137,105,252,248,248,1,137,
  41,131,193,8,57,193,15,134,244,1,139,6,15,182,204,15,182,232,131,198,4,193,
  232,16,252,255,36,252,235,255,139,106,252,248,139,172,253,133,233,139,173,
  233,72,139,69,0,72,137,4,202,139,6,15,182,204,15,182,232,131,198,4,193,232,
  16,252,255,36,252,235,255,139,106,252,248,139,172,253,141,233,128,189,233,
  0,139,173,233,139,12,194,139,68,194,4,137,77,0,137,69,4,15,132,244,247,252,
  246,133,233,235,15,133,244,248,248,1,139,6,15,182,204,15,182,232,131,198,
  4,193,232,16,252,255,36,252,235,248,2,129,232,239,129,252,248,239,15,134,
  244,1,252,246,129,233,235,15,132,244,1,135,213,141,139,233,255,232,251,1,
  28,137,252,234,252,233,244,1,255,72,252,247,208,139,106,252,248,139,172,253,
  141,233,139,12,135,139,133,233,137,8,199,64,4,237,252,246,133,233,235,15,
  133,244,248,248,1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,
  36,252,235,248,2,252,246,129,233,235,15,132,244,1,128,189,233,0,15,132,244,
  1,137,213,137,194,141,139,233,232,251,1,28,137,252,234,252,233,244,1,255,
  139,106,252,248,255,252,242,15,16,4,199,255,139,172,253,141,233,139,141,233,
  255,252,242,15,17,1,255,221,25,255,72,252,247,208,139,106,252,248,139,172,
  253,141,233,139,141,233,137,65,4,139,6,15,182,204,15,182,232,131,198,4,193,
  232,16,252,255,36,252,235,255,141,180,253,134,233,139,108,36,96,131,189,233,
  0,15,132,244,247,137,149,233,141,20,202,137,252,233,232,251,1,29,139,149,
  233,248,1,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,
  235,255,72,252,247,208,139,108,36,96,137,149,233,68,139,66,252,248,139,20,
  135,137,252,233,137,116,36,100,232,251,1,30,139,149,233,15,182,78,252,253,
  137,4,202,199,68,202,4,237,139,6,15,182,204,15,182,232,131,198,4,193,232,
  16,252,255,36,252,235,255,139,108,36,96,137,149,233,139,139,233,59,139,233,
  137,116,36,100,15,131,244,251,248,1,65,137,192,37,252,255,7,0,0,65,193,232,
  11,61,252,255,7,0,0,15,132,244,249,248,2,137,252,233,137,194,232,251,1,31,
  139,149,233,15,182,78,252,253,137,4,202,199,68,202,4,237,139,6,15,182,204,
  15,182,232,131,198,4,193,232,16,252,255,36,252,235,248,3,184,1,8,0,0,252,
  233,244,2,248,5,137,252,233,232,251,1,32,15,183,70,252,254,252,233,244,1,
  255,72,252,247,208,139,108,36,96,139,139,233,137,116,36,100,59,139,233,137,
  149,233,15,131,244,249,248,2,139,20,135,137,252,233,232,251,1,33,139,149,
  233,15,182,78,252,253,137,4,202,199,68,202,4,237,139,6,15,182,204,15,182,
  232,131,198,4,193,232,16,252,255,36,252,235,248,3,137,252,233,232,251,1,32,
  15,183,70,252,254,72,252,247,208,252,233,244,2,255,72,252,247,208,139,106,
  252,248,139,173,233,139,4,135,252,233,244,166,255,72,252,247,208,139,106,
  252,248,139,173,233,139,4,135,252,233,244,167,255,15,182,252,236,15,182,192,
  129,124,253,252,234,4,239,15,133,244,38,139,44,252,234,255,129,124,253,194,
  4,239,15,133,244,251,139,4,194,255,129,124,253,194,4,239,15,131,244,251,255,
  252,242,15,16,4,194,252,242,15,45,192,252,242,15,42,200,102,15,46,193,255,
  15,133,244,38,255,59,133,233,15,131,244,38,193,224,3,3,133,233,129,120,253,
  4,239,15,132,244,248,72,139,40,72,137,44,202,248,1,139,6,15,182,204,15,182,
  232,131,198,4,193,232,16,252,255,36,252,235,248,2,131,189,233,0,15,132,244,
  249,139,141,233,252,246,129,233,235,15,132,244,38,15,182,78,252,253,248,3,
  199,68,202,4,237,252,233,244,1,248,5,255,129,124,253,194,4,239,15,133,244,
  38,139,4,194,252,233,244,166,255,15,182,252,236,15,182,192,72,252,247,208,
  139,4,135,129,124,253,252,234,4,239,15,133,244,36,139,44,252,234,248,166,
  139,141,233,35,136,233,105,201,239,3,141,233,248,1,129,185,233,239,15,133,
  244,250,57,129,233,15,133,244,250,129,121,253,4,239,15,132,244,251,15,182,
  70,252,253,72,139,41,72,137,44,194,248,2,255,139,6,15,182,204,15,182,232,
  131,198,4,193,232,16,252,255,36,252,235,248,3,15,182,70,252,253,199,68,194,
  4,237,252,233,244,2,248,4,139,137,233,133,201,15,133,244,1,248,5,139,141,
  233,133,201,15,132,244,3,252,246,129,233,235,15,133,244,3,252,233,244,36,
  255,15,182,252,236,15,182,192,129,124,253,252,234,4,239,15,133,244,37,139,
  44,252,234,59,133,233,15,131,244,37,193,224,3,3,133,233,129,120,253,4,239,
  15,132,244,248,72,139,40,72,137,44,202,248,1,139,6,15,182,204,15,182,232,
  131,198,4,193,232,16,252,255,36,252,235,248,2,131,189,233,0,15,132,244,249,
  139,141,233,252,246,129,233,235,15,132,244,37,255,15,182,78,252,253,248,3,
  199,68,202,4,237,252,233,244,1,255,15,182,252,236,15,182,192,129,124,253,
  252,234,4,239,15,133,244,41,139,44,252,234,255,15,133,244,41,255,59,133,233,
  15,131,244,41,193,224,3,3,133,233,129,120,253,4,239,15,132,244,249,248,1,
  252,246,133,233,235,15,133,244,253,248,2,72,139,44,202,72,137,40,139,6,15,
  182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,248,3,131,189,
  233,0,15,132,244,1,139,141,233,252,246,129,233,235,255,15,132,244,41,15,182,
  78,252,253,252,233,244,1,248,5,129,124,253,194,4,239,15,133,244,41,139,4,
  194,252,233,244,167,248,7,128,165,233,235,139,139,233,137,171,233,137,141,
  233,15,182,78,252,253,252,233,244,2,255,15,182,252,236,15,182,192,72,252,
  247,208,139,4,135,129,124,253,252,234,4,239,15,133,244,39,139,44,252,234,
  248,167,139,141,233,35,136,233,105,201,239,198,133,233,0,3,141,233,248,1,
  129,185,233,239,15,133,244,251,57,129,233,15,133,244,251,129,121,253,4,239,
  15,132,244,250,248,2,255,252,246,133,233,235,15,133,244,253,248,3,15,182,
  70,252,253,72,139,44,194,72,137,41,139,6,15,182,204,15,182,232,131,198,4,
  193,232,16,252,255,36,252,235,248,4,131,189,233,0,15,132,244,2,137,76,36,
  80,139,141,233,252,246,129,233,235,15,132,244,39,139,76,36,80,252,233,244,
  2,248,5,139,137,233,133,201,15,133,244,1,255,139,141,233,133,201,15,132,244,
  252,252,246,129,233,235,15,132,244,39,248,6,137,68,36,80,199,68,36,84,237,
  137,108,36,32,139,76,36,96,137,145,233,76,141,68,36,80,137,252,234,137,205,
  137,116,36,100,232,251,1,34,139,149,233,139,108,36,32,137,193,252,233,244,
  2,248,7,128,165,233,235,139,131,233,137,171,233,137,133,233,252,233,244,3,
  255,15,182,252,236,15,182,192,129,124,253,252,234,4,239,15,133,244,40,139,
  44,252,234,59,133,233,15,131,244,40,193,224,3,3,133,233,129,120,253,4,239,
  15,132,244,249,248,1,252,246,133,233,235,15,133,244,253,248,2,72,139,12,202,
  72,137,8,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,
  235,248,3,131,189,233,0,15,132,244,1,255,139,141,233,252,246,129,233,235,
  15,132,244,40,15,182,78,252,253,252,233,244,1,248,7,128,165,233,235,139,139,
  233,137,171,233,137,141,233,15,182,78,252,253,252,233,244,2,255,137,124,36,
  80,139,60,199,248,1,141,12,202,139,105,252,248,252,246,133,233,235,15,133,
  244,253,248,2,139,68,36,84,131,232,1,15,132,244,250,1,252,248,59,133,233,
  15,135,244,251,41,252,248,193,231,3,3,189,233,248,3,72,139,41,131,193,8,72,
  137,47,131,199,8,131,232,1,15,133,244,3,248,4,139,124,36,80,139,6,15,182,
  204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,248,5,139,76,36,96,
  137,145,233,137,252,234,65,137,192,137,205,137,116,36,100,232,251,1,35,139,
  149,233,15,182,78,252,253,252,233,244,1,248,7,255,128,165,233,235,139,131,
  233,137,171,233,137,133,233,252,233,244,2,255,3,68,36,84,255,129,124,253,
  202,4,239,139,44,202,15,133,244,57,141,84,202,8,137,114,252,252,139,181,233,
  139,14,15,182,252,233,15,182,205,131,198,4,252,255,36,252,235,255,141,76,
  202,8,137,215,139,105,252,248,129,121,253,252,252,239,15,133,244,29,248,58,
  139,114,252,252,252,247,198,237,15,133,244,253,248,1,137,106,252,248,137,
  68,36,84,131,232,1,15,132,244,249,248,2,72,139,41,131,193,8,72,137,47,131,
  199,8,131,232,1,15,133,244,2,139,106,252,248,248,3,139,68,36,84,128,189,233,
  1,15,135,244,251,248,4,139,181,233,139,14,15,182,252,233,15,182,205,131,198,
  4,252,255,36,252,235,248,5,255,252,247,198,237,15,133,244,4,15,182,78,252,
  253,72,252,247,209,141,12,202,139,121,252,248,139,191,233,139,191,233,252,
  233,244,4,248,7,129,252,238,239,252,247,198,237,15,133,244,254,41,252,242,
  137,215,139,114,252,252,252,233,244,1,248,8,129,198,239,252,233,244,1,255,
  141,76,202,8,72,139,105,232,72,139,65,252,240,72,137,41,72,137,65,8,139,105,
  224,139,65,228,137,105,252,248,137,65,252,252,129,252,248,239,184,237,15,
  133,244,29,137,202,137,114,252,252,139,181,233,139,14,15,182,252,233,15,182,
  205,131,198,4,252,255,36,252,235,255,137,124,36,80,137,92,36,84,139,108,202,
  252,240,139,68,202,252,248,139,157,233,131,198,4,139,189,233,248,1,57,216,
  15,131,244,251,129,124,253,199,4,239,15,132,244,250,255,219,68,202,252,248,
  255,72,139,44,199,72,137,108,202,8,131,192,1,255,137,68,202,252,248,248,2,
  15,183,70,252,254,141,180,253,134,233,248,3,139,92,36,84,139,124,36,80,139,
  6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,248,4,131,
  192,1,255,137,68,202,252,248,255,252,233,244,1,248,5,41,216,248,6,59,133,
  233,15,135,244,3,105,252,248,239,3,189,233,129,191,233,239,15,132,244,253,
  141,92,24,1,72,139,175,233,72,139,135,233,72,137,44,202,72,137,68,202,8,137,
  92,202,252,248,252,233,244,2,248,7,131,192,1,252,233,244,6,255,129,124,253,
  202,252,236,239,15,133,244,251,139,108,202,232,129,124,253,202,252,244,239,
  15,133,244,251,129,124,253,202,252,252,239,15,133,244,251,128,189,233,235,
  15,133,244,251,141,180,253,134,233,199,68,202,252,248,0,0,0,0,248,1,139,6,
  15,182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,248,5,198,70,
  252,252,235,141,180,253,134,233,198,6,235,252,233,244,1,255,15,182,252,236,
  15,182,192,137,124,36,80,141,188,253,194,233,141,12,202,43,122,252,252,133,
  252,237,15,132,244,251,141,108,252,233,252,248,57,215,15,131,244,248,248,
  1,72,139,71,252,248,131,199,8,72,137,1,131,193,8,57,252,233,15,131,244,249,
  57,215,15,130,244,1,248,2,199,65,4,237,131,193,8,57,252,233,15,130,244,2,
  248,3,139,124,36,80,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,
  255,36,252,235,248,5,199,68,36,84,1,0,0,0,137,208,41,252,248,15,134,244,3,
  137,197,193,252,237,3,131,197,1,137,108,36,84,139,108,36,96,1,200,59,133,
  233,15,135,244,253,248,6,255,72,139,71,252,248,131,199,8,72,137,1,131,193,
  8,57,215,15,130,244,6,252,233,244,3,248,7,137,149,233,137,141,233,137,116,
  36,100,41,215,139,84,36,84,131,252,234,1,137,252,233,232,251,1,0,139,149,
  233,139,141,233,1,215,252,233,244,6,255,193,225,3,255,248,1,139,114,252,252,
  137,68,36,84,252,247,198,237,15,133,244,253,255,248,13,137,215,131,232,1,
  15,132,244,249,248,2,72,139,44,15,72,137,111,252,248,131,199,8,131,232,1,
  15,133,244,2,248,3,139,68,36,84,15,182,110,252,255,248,5,57,197,15,135,244,
  252,255,72,139,44,10,72,137,106,252,248,255,248,5,56,70,252,255,15,135,244,
  252,255,15,182,78,252,253,72,252,247,209,141,20,202,139,122,252,248,139,191,
  233,139,191,233,139,6,15,182,204,15,182,232,131,198,4,193,232,16,252,255,
  36,252,235,248,6,255,199,71,252,252,237,131,199,8,255,199,68,194,252,244,
  237,255,131,192,1,252,233,244,5,248,7,141,174,233,252,247,197,237,15,133,
  244,14,41,252,234,255,1,252,233,255,137,252,245,209,252,237,129,229,239,102,
  131,172,253,43,233,1,15,132,244,147,255,141,12,202,255,129,121,253,4,239,
  15,133,244,255,255,129,121,253,12,239,15,133,244,59,129,121,253,20,239,15,
  133,244,59,139,41,131,121,16,0,15,140,244,251,255,129,121,253,12,239,15,133,
  244,164,129,121,253,20,239,15,133,244,164,255,139,105,16,133,252,237,15,136,
  244,251,3,41,15,128,244,247,137,41,255,59,105,8,199,65,28,237,137,105,24,
  255,15,142,244,253,248,1,248,6,141,180,253,134,233,255,141,180,253,134,233,
  15,183,70,252,254,15,142,245,248,1,248,6,255,15,143,244,253,248,6,141,180,
  253,134,233,248,1,255,248,7,139,6,15,182,204,15,182,232,131,198,4,193,232,
  16,252,255,36,252,235,248,5,255,3,41,15,128,244,1,137,41,255,15,141,244,7,
  255,141,180,253,134,233,15,183,70,252,254,15,141,245,255,15,140,244,7,255,
  252,233,244,6,248,9,255,129,121,253,4,239,255,15,131,244,59,129,121,253,12,
  239,15,131,244,59,255,129,121,253,12,239,15,131,244,164,129,121,253,20,239,
  15,131,244,164,255,139,105,20,255,129,252,253,239,15,131,244,59,255,252,242,
  15,16,1,252,242,15,16,73,8,255,252,242,15,88,65,16,252,242,15,17,1,133,252,
  237,15,136,244,249,255,15,140,244,249,255,102,15,46,200,248,1,252,242,15,
  17,65,24,255,221,65,8,221,1,255,220,65,16,221,17,221,81,24,133,252,237,15,
  136,244,247,255,221,81,24,15,140,244,247,255,217,201,248,1,255,15,183,70,
  252,254,255,15,131,244,7,255,15,131,244,248,141,180,253,134,233,255,141,180,
  253,134,233,15,183,70,252,254,15,131,245,255,15,130,244,7,255,15,130,244,
  248,141,180,253,134,233,255,248,3,102,15,46,193,252,233,244,1,255,141,12,
  202,139,105,4,129,252,253,239,15,132,244,247,255,137,105,252,252,139,41,137,
  105,252,248,252,233,245,255,141,180,253,134,233,139,1,137,105,252,252,137,
  65,252,248,255,139,139,233,139,4,129,72,139,128,233,139,108,36,96,137,147,
  233,137,171,233,76,137,100,36,80,76,137,108,36,32,76,137,116,36,24,76,137,
  124,36,16,72,137,225,72,129,252,236,239,102,15,127,49,102,15,127,185,233,
  102,68,15,127,129,233,102,68,15,127,137,233,102,68,15,127,145,233,102,68,
  15,127,153,233,102,68,15,127,161,233,102,68,15,127,169,233,102,68,15,127,
  177,233,102,68,15,127,185,233,252,255,224,255,141,180,253,134,233,139,6,15,
  182,204,15,182,232,131,198,4,193,232,16,252,255,36,252,235,255,137,252,245,
  209,252,237,129,229,239,102,131,172,253,43,233,1,15,132,244,149,255,139,190,
  233,139,108,36,96,141,12,202,59,141,233,15,135,244,24,15,182,142,233,57,200,
  15,134,244,249,248,2,255,15,183,70,252,254,252,233,245,255,248,3,199,68,194,
  252,252,237,131,192,1,57,200,15,134,244,3,252,233,244,2,255,141,44,197,237,
  141,4,194,139,122,252,248,137,104,252,252,137,120,252,248,139,108,36,96,141,
  12,200,59,141,233,15,135,244,23,137,209,137,194,15,182,174,233,133,252,237,
  15,132,244,248,248,1,131,193,8,57,209,15,131,244,249,139,121,252,248,137,
  56,139,121,252,252,137,120,4,131,192,8,199,65,252,252,237,131,252,237,1,15,
  133,244,1,248,2,255,139,190,233,139,6,15,182,204,15,182,232,131,198,4,193,
  232,16,252,255,36,252,235,255,248,3,199,64,4,237,131,192,8,131,252,237,1,
  15,133,244,3,252,233,244,2,255,139,106,252,248,72,139,189,233,139,108,36,
  96,141,68,194,252,248,137,149,233,141,136,233,59,141,233,137,133,233,255,
  72,137,252,250,137,252,233,255,15,135,244,22,199,131,233,237,255,252,255,
  215,255,252,255,147,233,255,199,131,233,237,139,149,233,141,12,194,252,247,
  217,3,141,233,139,114,252,252,252,233,244,12,255,254,0
};

enum {
  GLOB_vm_returnp,
  GLOB_cont_dispatch,
  GLOB_vm_returnc,
  GLOB_BC_RET_Z,
  GLOB_vm_return,
  GLOB_vm_leave_cp,
  GLOB_vm_leave_unw,
  GLOB_vm_unwind_c,
  GLOB_vm_unwind_c_eh,
  GLOB_vm_unwind_rethrow,
  GLOB_vm_unwind_ff,
  GLOB_vm_unwind_ff_eh,
  GLOB_vm_growstack_c,
  GLOB_vm_growstack_v,
  GLOB_vm_growstack_f,
  GLOB_vm_resume,
  GLOB_vm_pcall,
  GLOB_vm_call,
  GLOB_vm_call_dispatch,
  GLOB_vmeta_call,
  GLOB_vm_call_dispatch_f,
  GLOB_vm_cpcall,
  GLOB_vm_call_tail,
  GLOB_cont_cat,
  GLOB_cont_ra,
  GLOB_BC_CAT_Z,
  GLOB_vmeta_tgets,
  GLOB_vmeta_tgetb,
  GLOB_vmeta_tgetv,
  GLOB_vmeta_tsets,
  GLOB_vmeta_tsetb,
  GLOB_vmeta_tsetv,
  GLOB_cont_nop,
  GLOB_vmeta_comp,
  GLOB_vmeta_binop,
  GLOB_cont_condt,
  GLOB_cont_condf,
  GLOB_vmeta_equal,
  GLOB_vmeta_equal_cd,
  GLOB_vmeta_arith_vno,
  GLOB_vmeta_arith_vn,
  GLOB_vmeta_arith_nvo,
  GLOB_vmeta_arith_nv,
  GLOB_vmeta_unm,
  GLOB_vmeta_arith_vvo,
  GLOB_vmeta_arith_vv,
  GLOB_vmeta_len,
  GLOB_vmeta_call_ra,
  GLOB_BC_CALLT_Z,
  GLOB_vmeta_for,
  GLOB_ff_assert,
  GLOB_fff_fallback,
  GLOB_fff_res_,
  GLOB_ff_type,
  GLOB_fff_res1,
  GLOB_ff_getmetatable,
  GLOB_ff_setmetatable,
  GLOB_ff_rawget,
  GLOB_ff_tonumber,
  GLOB_fff_resi,
  GLOB_fff_resxmm0,
  GLOB_fff_resn,
  GLOB_ff_tostring,
  GLOB_fff_gcstep,
  GLOB_ff_next,
  GLOB_fff_res2,
  GLOB_fff_res,
  GLOB_ff_pairs,
  GLOB_ff_ipairs_aux,
  GLOB_fff_res0,
  GLOB_ff_ipairs,
  GLOB_ff_pcall,
  GLOB_ff_xpcall,
  GLOB_ff_coroutine_resume,
  GLOB_ff_coroutine_wrap_aux,
  GLOB_ff_coroutine_yield,
  GLOB_ff_math_abs,
  GLOB_fff_resbit,
  GLOB_ff_math_floor,
  GLOB_vm_floor,
  GLOB_ff_math_ceil,
  GLOB_vm_ceil,
  GLOB_ff_math_sqrt,
  GLOB_ff_math_log,
  GLOB_ff_math_log10,
  GLOB_ff_math_exp,
  GLOB_vm_exp,
  GLOB_ff_math_sin,
  GLOB_ff_math_cos,
  GLOB_ff_math_tan,
  GLOB_ff_math_asin,
  GLOB_ff_math_acos,
  GLOB_ff_math_atan,
  GLOB_ff_math_sinh,
  GLOB_ff_math_cosh,
  GLOB_ff_math_tanh,
  GLOB_ff_math_deg,
  GLOB_ff_math_rad,
  GLOB_ff_math_atan2,
  GLOB_ff_math_ldexp,
  GLOB_ff_math_frexp,
  GLOB_ff_math_modf,
  GLOB_vm_trunc,
  GLOB_ff_math_fmod,
  GLOB_ff_math_pow,
  GLOB_vm_pow,
  GLOB_ff_math_min,
  GLOB_ff_math_max,
  GLOB_ff_string_len,
  GLOB_ff_string_byte,
  GLOB_ff_string_char,
  GLOB_fff_newstr,
  GLOB_ff_string_sub,
  GLOB_fff_emptystr,
  GLOB_ff_string_rep,
  GLOB_fff_fallback_2,
  GLOB_ff_string_reverse,
  GLOB_fff_fallback_1,
  GLOB_ff_string_lower,
  GLOB_ff_string_upper,
  GLOB_ff_table_getn,
  GLOB_ff_bit_tobit,
  GLOB_ff_bit_band,
  GLOB_fff_fallback_bit_op,
  GLOB_ff_bit_bor,
  GLOB_ff_bit_bxor,
  GLOB_ff_bit_bswap,
  GLOB_ff_bit_bnot,
  GLOB_ff_bit_lshift,
  GLOB_ff_bit_rshift,
  GLOB_ff_bit_arshift,
  GLOB_ff_bit_rol,
  GLOB_ff_bit_ror,
  GLOB_vm_record,
  GLOB_vm_rethook,
  GLOB_vm_inshook,
  GLOB_cont_hook,
  GLOB_vm_hotloop,
  GLOB_vm_callhook,
  GLOB_vm_hotcall,
  GLOB_vm_exit_handler,
  GLOB_vm_exit_interp,
  GLOB_vm_floor_sse,
  GLOB_vm_ceil_sse,
  GLOB_vm_trunc_sse,
  GLOB_vm_mod,
  GLOB_vm_exp2,
  GLOB_vm_exp2raw,
  GLOB_vm_pow_sse,
  GLOB_vm_powi_sse,
  GLOB_vm_foldfpm,
  GLOB_vm_foldarith,
  GLOB_vm_cpuid,
  GLOB_vm_ffi_call,
  GLOB_assert_bad_for_arg_type,
  GLOB_BC_MODVN_Z,
  GLOB_BC_TGETS_Z,
  GLOB_BC_TSETS_Z,
  GLOB__MAX
};
static const char *const globnames[] = {
  "vm_returnp",
  "cont_dispatch",
  "vm_returnc",
  "BC_RET_Z",
  "vm_return",
  "vm_leave_cp",
  "vm_leave_unw",
  "vm_unwind_c@8",
  "vm_unwind_c_eh",
  "vm_unwind_rethrow",
  "vm_unwind_ff@4",
  "vm_unwind_ff_eh",
  "vm_growstack_c",
  "vm_growstack_v",
  "vm_growstack_f",
  "vm_resume",
  "vm_pcall",
  "vm_call",
  "vm_call_dispatch",
  "vmeta_call",
  "vm_call_dispatch_f",
  "vm_cpcall",
  "vm_call_tail",
  "cont_cat",
  "cont_ra",
  "BC_CAT_Z",
  "vmeta_tgets",
  "vmeta_tgetb",
  "vmeta_tgetv",
  "vmeta_tsets",
  "vmeta_tsetb",
  "vmeta_tsetv",
  "cont_nop",
  "vmeta_comp",
  "vmeta_binop",
  "cont_condt",
  "cont_condf",
  "vmeta_equal",
  "vmeta_equal_cd",
  "vmeta_arith_vno",
  "vmeta_arith_vn",
  "vmeta_arith_nvo",
  "vmeta_arith_nv",
  "vmeta_unm",
  "vmeta_arith_vvo",
  "vmeta_arith_vv",
  "vmeta_len",
  "vmeta_call_ra",
  "BC_CALLT_Z",
  "vmeta_for",
  "ff_assert",
  "fff_fallback",
  "fff_res_",
  "ff_type",
  "fff_res1",
  "ff_getmetatable",
  "ff_setmetatable",
  "ff_rawget",
  "ff_tonumber",
  "fff_resi",
  "fff_resxmm0",
  "fff_resn",
  "ff_tostring",
  "fff_gcstep",
  "ff_next",
  "fff_res2",
  "fff_res",
  "ff_pairs",
  "ff_ipairs_aux",
  "fff_res0",
  "ff_ipairs",
  "ff_pcall",
  "ff_xpcall",
  "ff_coroutine_resume",
  "ff_coroutine_wrap_aux",
  "ff_coroutine_yield",
  "ff_math_abs",
  "fff_resbit",
  "ff_math_floor",
  "vm_floor",
  "ff_math_ceil",
  "vm_ceil",
  "ff_math_sqrt",
  "ff_math_log",
  "ff_math_log10",
  "ff_math_exp",
  "vm_exp",
  "ff_math_sin",
  "ff_math_cos",
  "ff_math_tan",
  "ff_math_asin",
  "ff_math_acos",
  "ff_math_atan",
  "ff_math_sinh",
  "ff_math_cosh",
  "ff_math_tanh",
  "ff_math_deg",
  "ff_math_rad",
  "ff_math_atan2",
  "ff_math_ldexp",
  "ff_math_frexp",
  "ff_math_modf",
  "vm_trunc",
  "ff_math_fmod",
  "ff_math_pow",
  "vm_pow",
  "ff_math_min",
  "ff_math_max",
  "ff_string_len",
  "ff_string_byte",
  "ff_string_char",
  "fff_newstr",
  "ff_string_sub",
  "fff_emptystr",
  "ff_string_rep",
  "fff_fallback_2",
  "ff_string_reverse",
  "fff_fallback_1",
  "ff_string_lower",
  "ff_string_upper",
  "ff_table_getn",
  "ff_bit_tobit",
  "ff_bit_band",
  "fff_fallback_bit_op",
  "ff_bit_bor",
  "ff_bit_bxor",
  "ff_bit_bswap",
  "ff_bit_bnot",
  "ff_bit_lshift",
  "ff_bit_rshift",
  "ff_bit_arshift",
  "ff_bit_rol",
  "ff_bit_ror",
  "vm_record",
  "vm_rethook",
  "vm_inshook",
  "cont_hook",
  "vm_hotloop",
  "vm_callhook",
  "vm_hotcall",
  "vm_exit_handler",
  "vm_exit_interp",
  "vm_floor_sse",
  "vm_ceil_sse",
  "vm_trunc_sse",
  "vm_mod",
  "vm_exp2",
  "vm_exp2raw",
  "vm_pow_sse",
  "vm_powi_sse",
  "vm_foldfpm",
  "vm_foldarith",
  "vm_cpuid",
  "vm_ffi_call@4",
  "assert_bad_for_arg_type",
  "BC_MODVN_Z",
  "BC_TGETS_Z",
  "BC_TSETS_Z",
  (const char *)0
};
static const char *const extnames[] = {
  "lj_state_growstack@8",
  "lj_meta_tget",
  "lj_meta_tset",
  "lj_meta_comp",
  "lj_meta_equal",
  "lj_meta_equal_cd@8",
  "lj_meta_arith",
  "lj_meta_len@8",
  "lj_meta_call",
  "lj_meta_for@8",
  "lj_tab_get",
  "lj_str_fromnumber@8",
  "lj_str_fromnum@8",
  "lj_tab_next",
  "lj_tab_getinth@8",
  "lj_ffh_coroutine_wrap_err@8",
  "lj_wrapper_sinh",
  "lj_wrapper_cosh",
  "lj_wrapper_tanh",
  "lj_str_new",
  "lj_tab_len@4",
  "lj_gc_step@4",
  "lj_dispatch_ins@8",
  "lj_trace_hot@8",
  "lj_dispatch_call@8",
  "lj_trace_exit@8",
  "lj_err_throw@8",
  "lj_meta_cat",
  "lj_gc_barrieruv@8",
  "lj_func_closeuv@8",
  "lj_func_newL_gc",
  "lj_tab_new",
  "lj_gc_step_fixtop@4",
  "lj_tab_dup@8",
  "lj_tab_newkey",
  "lj_tab_reasize",
  (const char *)0
};
#define Dt1(_V) (int)(ptrdiff_t)&(((lua_State *)0)_V)
#define Dt2(_V) (int)(ptrdiff_t)&(((global_State *)0)_V)
#define Dt3(_V) (int)(ptrdiff_t)&(((TValue *)0)_V)
#define Dt4(_V) (int)(ptrdiff_t)&(((GCobj *)0)_V)
#define Dt5(_V) (int)(ptrdiff_t)&(((GCstr *)0)_V)
#define Dt6(_V) (int)(ptrdiff_t)&(((GCtab *)0)_V)
#define Dt7(_V) (int)(ptrdiff_t)&(((GCfuncL *)0)_V)
#define Dt8(_V) (int)(ptrdiff_t)&(((GCfuncC *)0)_V)
#define Dt9(_V) (int)(ptrdiff_t)&(((GCproto *)0)_V)
#define DtA(_V) (int)(ptrdiff_t)&(((GCupval *)0)_V)
#define DtB(_V) (int)(ptrdiff_t)&(((Node *)0)_V)
#define DtC(_V) (int)(ptrdiff_t)&(((int *)0)_V)
#define DtD(_V) (int)(ptrdiff_t)&(((GCtrace *)0)_V)
#define DISPATCH_GL(field)	(GG_DISP2G + (int)offsetof(global_State, field))
#define DISPATCH_J(field)	(GG_DISP2J + (int)offsetof(jit_State, field))
#define PC2PROTO(field)  ((int)offsetof(GCproto, field)-(int)sizeof(GCproto))

/* Generate subroutines used by opcodes and other parts of the VM. */
/* The .code_sub section should be last to help static branch prediction. */
static void build_subroutines(BuildCtx *ctx, int cmov, int sse)
{
  dasm_put(Dst, 0);
  dasm_put(Dst, 2, FRAME_P, LJ_TTRUE, FRAME_TYPE, FRAME_C, FRAME_TYPE, DISPATCH_GL(vmstate), ~LJ_VMST_C);
  dasm_put(Dst, 109, Dt1(->base), Dt1(->top), Dt1(->cframe), Dt1(->maxstack), LJ_TNIL);
  dasm_put(Dst, 198, Dt1(->top), Dt1(->top), Dt1(->glref), Dt2(->vmstate), ~LJ_VMST_C, CFRAME_RAWMASK);
  dasm_put(Dst, 276, 1+1, Dt1(->base), Dt1(->glref), GG_G2DISP, LJ_TFALSE, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, LUA_MINSTACK, -4+PC2PROTO(framesize), Dt1(->base));
  dasm_put(Dst, 356, Dt1(->top), Dt1(->base), Dt1(->top), Dt7(->pc), FRAME_CP, CFRAME_RESUME, Dt1(->glref), GG_G2DISP, Dt1(->cframe), Dt1(->status), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->status), Dt1(->base), Dt1(->top), FRAME_TYPE);
  dasm_put(Dst, 511, FRAME_CP, FRAME_C, Dt1(->cframe), Dt1(->cframe), Dt1(->glref), GG_G2DISP, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base));
  dasm_put(Dst, 604, Dt1(->top), LJ_TFUNC, Dt7(->pc), Dt1(->stack), Dt1(->top), Dt1(->cframe), Dt1(->cframe), FRAME_CP, LJ_TNIL);
  dasm_put(Dst, 770, 0, Dt7(->pc), PC2PROTO(k), Dt1(->base), LJ_TSTR, BC_GGET, DISPATCH_GL(tmptv), LJ_TTAB);
  dasm_put(Dst, 894);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 908, LJ_TISNUM);
  } else if (sse) {
    dasm_put(Dst, 918);
  } else {
  }
  dasm_put(Dst, 931, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, 2+1, LJ_TSTR, BC_GSET);
  dasm_put(Dst, 1078, DISPATCH_GL(tmptv), LJ_TTAB);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 908, LJ_TISNUM);
  } else if (sse) {
    dasm_put(Dst, 918);
  } else {
  }
  dasm_put(Dst, 1101, Dt1(->base), Dt1(->base), Dt1(->top), FRAME_CONT, 3+1, Dt1(->base), Dt1(->base));
  dasm_put(Dst, 1274, -BCBIAS_J*4, LJ_TISTRUECOND, LJ_TISTRUECOND, Dt1(->base));
  dasm_put(Dst, 1374);
#if LJ_HASFFI
  dasm_put(Dst, 1394, Dt1(->base));
#endif
  dasm_put(Dst, 1425);
#if LJ_DUALNUM
  dasm_put(Dst, 1428);
#endif
  dasm_put(Dst, 1434);
#if LJ_DUALNUM
  dasm_put(Dst, 902);
#endif
  dasm_put(Dst, 1446);
#if LJ_DUALNUM
  dasm_put(Dst, 1428);
#endif
  dasm_put(Dst, 1474, Dt1(->base), Dt1(->base), FRAME_CONT, 2+1, Dt1(->base), Dt1(->base), Dt1(->base));
  dasm_put(Dst, 1611, Dt1(->base), Dt7(->pc), Dt1(->base), Dt1(->base), GG_DISP2STATIC, 1+1, LJ_TISTRUECOND);
  dasm_put(Dst, 1794, 1+1, ~LJ_TNUMX);
  if (cmov) {
  dasm_put(Dst, 1839);
  } else {
  dasm_put(Dst, 1843);
  }
  dasm_put(Dst, 1852, ((char *)(&((GCfuncC *)0)->upvalue)), LJ_TSTR, ~LJ_TLIGHTUD, 1+1, LJ_TTAB, Dt6(->metatable), LJ_TNIL);
  dasm_put(Dst, 1931, DISPATCH_GL(gcroot)+4*(GCROOT_MMNAME+MM_metatable), LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), DtB(->next));
  dasm_put(Dst, 1988, LJ_TNIL, LJ_TUDATA, LJ_TNUMX, LJ_TISNUM, LJ_TLIGHTUD);
  dasm_put(Dst, 2054, LJ_TNUMX, DISPATCH_GL(gcroot[GCROOT_BASEMT]), 2+1, LJ_TTAB, Dt6(->metatable), LJ_TTAB, Dt6(->metatable), LJ_TTAB);
  dasm_put(Dst, 2124, Dt6(->marked), LJ_GC_BLACK, Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist), 2+1, LJ_TTAB);
  dasm_put(Dst, 2213, 1+1, LJ_TISNUM);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 2227);
  } else {
    dasm_put(Dst, 2244);
  }
  if (sse) {
    dasm_put(Dst, 2249);
  } else {
    dasm_put(Dst, 2259);
  }
  dasm_put(Dst, 2266, 1+1, LJ_TSTR, LJ_TSTR, LJ_TISNUM, DISPATCH_GL(gcroot[GCROOT_BASEMT_NUM]), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold));
  dasm_put(Dst, 2332, Dt1(->base));
  if (LJ_DUALNUM) {
    dasm_put(Dst, 2356);
  } else {
    dasm_put(Dst, 2361);
  }
  dasm_put(Dst, 2366, Dt1(->base), 1+1, LJ_TTAB, Dt1(->base), Dt1(->top), Dt1(->base), 1+2);
  dasm_put(Dst, 2459, LJ_TNIL, LJ_TNIL, 1+1, LJ_TTAB);
#ifdef LUAJIT_ENABLE_LUA52COMPAT
  dasm_put(Dst, 2506, Dt6(->metatable));
#endif
  dasm_put(Dst, 2515, Dt8(->upvalue[0]), LJ_TFUNC, LJ_TNIL, 1+3, 1+1, LJ_TTAB, LJ_TISNUM);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 2501);
  } else {
    dasm_put(Dst, 2244);
  }
  dasm_put(Dst, 2570);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 2575, LJ_TISNUM);
  } else if (sse) {
    dasm_put(Dst, 2591, (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 2624, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->hmask), 1+0);
  dasm_put(Dst, 2486, 1+1, LJ_TTAB);
#ifdef LUAJIT_ENABLE_LUA52COMPAT
  dasm_put(Dst, 2506, Dt6(->metatable));
#endif
  dasm_put(Dst, 2701, Dt8(->upvalue[0]), LJ_TFUNC);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 2722, LJ_TISNUM);
  } else if (sse) {
    dasm_put(Dst, 2734);
  } else {
    dasm_put(Dst, 2744);
  }
  dasm_put(Dst, 2751, 1+3, 1+1, 8+FRAME_PCALL, DISPATCH_GL(hookmask), HOOK_ACTIVE_SHIFT, 2+1, LJ_TFUNC);
  dasm_put(Dst, 2815, LJ_TFUNC, 16+FRAME_PCALL, 1+1, LJ_TTHREAD, Dt1(->cframe), Dt1(->status), LUA_YIELD, Dt1(->top));
  dasm_put(Dst, 2905, Dt1(->base), Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP);
  dasm_put(Dst, 2993, Dt1(->base), LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack), LJ_TTRUE, FRAME_TYPE);
  dasm_put(Dst, 3106, LJ_TFALSE, Dt1(->top), Dt1(->top), 1+2, Dt1(->top), Dt1(->base), Dt8(->upvalue[0].gcr), Dt1(->cframe));
  dasm_put(Dst, 3204, Dt1(->status), LUA_YIELD, Dt1(->top), Dt1(->base), Dt1(->maxstack), Dt1(->top), Dt1(->base), Dt1(->top));
  dasm_put(Dst, 3271, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), LUA_YIELD, Dt1(->base), Dt1(->top), Dt1(->top), Dt1(->maxstack));
  dasm_put(Dst, 3359, FRAME_TYPE, Dt1(->top), Dt1(->base), Dt1(->cframe), CFRAME_RESUME);
  dasm_put(Dst, 3471, Dt1(->base), Dt1(->top), Dt1(->cframe), LUA_YIELD, Dt1(->status));
  if (!LJ_DUALNUM) {
    dasm_put(Dst, 3498);
  }
  if (sse) {
    dasm_put(Dst, 3501);
  }
  dasm_put(Dst, 3516, 1+1);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 3527, LJ_TISNUM, LJ_TISNUM);
  } else {
    dasm_put(Dst, 3607, LJ_TISNUM);
  }
  if (sse) {
    dasm_put(Dst, 3617, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32));
  } else {
    dasm_put(Dst, 3648);
  }
  dasm_put(Dst, 3665, 1+1, FRAME_TYPE, LJ_TNIL);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 3761, LJ_TISNUM);
  } else {
  dasm_put(Dst, 3607, LJ_TISNUM);
  }
  if (sse) {
  dasm_put(Dst, 3783);
    if (LJ_DUALNUM) {
  dasm_put(Dst, 3792);
    }
  dasm_put(Dst, 2254);
  } else {
  dasm_put(Dst, 3826);
    if (LJ_DUALNUM) {
    } else {
  dasm_put(Dst, 2261);
    }
  }
  dasm_put(Dst, 3832);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 3761, LJ_TISNUM);
  } else {
  dasm_put(Dst, 3607, LJ_TISNUM);
  }
  if (sse) {
  dasm_put(Dst, 3835);
    if (LJ_DUALNUM) {
  dasm_put(Dst, 3792);
    }
  dasm_put(Dst, 2254);
  } else {
  dasm_put(Dst, 3844);
    if (LJ_DUALNUM) {
    } else {
  dasm_put(Dst, 2261);
    }
  }
  if (sse) {
    dasm_put(Dst, 3850, 1+1, LJ_TISNUM);
  } else {
    dasm_put(Dst, 3879, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 3908, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 3977, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 4034, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1);
  dasm_put(Dst, 4097, LJ_TISNUM, 1+1, LJ_TISNUM, 1+1, LJ_TISNUM);
  dasm_put(Dst, 4187);
  if (sse) {
  dasm_put(Dst, 4199, 1+1, LJ_TISNUM);
  } else {
  }
  dasm_put(Dst, 4224);
  if (sse) {
  dasm_put(Dst, 4238, 1+1, LJ_TISNUM);
  } else {
  }
  dasm_put(Dst, 4263);
  if (sse) {
  dasm_put(Dst, 4277, 1+1, LJ_TISNUM);
  } else {
  }
  dasm_put(Dst, 4302);
  if (sse) {
    dasm_put(Dst, 4318, 1+1, LJ_TISNUM, Dt8(->upvalue[0]));
  } else {
    dasm_put(Dst, 4357, 1+1, LJ_TISNUM, Dt8(->upvalue[0]));
  }
  dasm_put(Dst, 4390, 2+1, LJ_TISNUM, LJ_TISNUM, 2+1, LJ_TISNUM, LJ_TISNUM);
  dasm_put(Dst, 4455, 1+1, LJ_TISNUM);
  if (sse) {
    dasm_put(Dst, 4554);
  } else {
    dasm_put(Dst, 4560);
  }
  dasm_put(Dst, 4569);
  if (sse) {
    dasm_put(Dst, 4594);
  } else {
    dasm_put(Dst, 4600);
  }
  dasm_put(Dst, 4603, 1+2);
  if (sse) {
    dasm_put(Dst, 4612);
  } else {
    dasm_put(Dst, 4620);
  }
  dasm_put(Dst, 4628);
  if (sse) {
    dasm_put(Dst, 4631, (unsigned int)(U64x(43500000,00000000)), (unsigned int)((U64x(43500000,00000000))>>32));
  } else {
    dasm_put(Dst, 4658);
  }
  dasm_put(Dst, 4677);
  if (sse) {
    dasm_put(Dst, 4693, 1+1, LJ_TISNUM);
  } else {
    dasm_put(Dst, 4718, 1+1, LJ_TISNUM);
  }
  dasm_put(Dst, 4740);
  if (sse) {
    dasm_put(Dst, 4762);
  } else {
    dasm_put(Dst, 4788);
  }
  dasm_put(Dst, 4805, 1+2);
  if (sse) {
    dasm_put(Dst, 4845);
  } else {
    dasm_put(Dst, 4853);
  }
  dasm_put(Dst, 4863, 2+1, LJ_TISNUM, LJ_TISNUM);
  if (sse) {
    dasm_put(Dst, 4915, 2+1, LJ_TISNUM, LJ_TISNUM);
  } else {
    dasm_put(Dst, 4962, 2+1, LJ_TISNUM, LJ_TISNUM);
  }
  dasm_put(Dst, 5003, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 5016, LJ_TISNUM);
  if (sse) {
  dasm_put(Dst, 4554);
  } else {
  }
  dasm_put(Dst, 5066);
  } else {
  dasm_put(Dst, 2244);
  }
  if (sse) {
  dasm_put(Dst, 5077, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 5098);
  } else {
  dasm_put(Dst, 2244);
  }
  dasm_put(Dst, 5119);
  } else {
  }
  dasm_put(Dst, 5144, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 5157, LJ_TISNUM);
  if (sse) {
  dasm_put(Dst, 4554);
  } else {
  }
  dasm_put(Dst, 5066);
  } else {
  dasm_put(Dst, 2244);
  }
  if (sse) {
  dasm_put(Dst, 5077, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 5098);
  } else {
  dasm_put(Dst, 2244);
  }
  dasm_put(Dst, 5207);
  } else {
  }
  if (!sse) {
    dasm_put(Dst, 5232);
  }
  dasm_put(Dst, 5241, 1+1, LJ_TSTR);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 5263, Dt5(->len));
  } else if (sse) {
    dasm_put(Dst, 5271, Dt5(->len));
  } else {
    dasm_put(Dst, 5282, Dt5(->len));
  }
  dasm_put(Dst, 5290, 1+1, LJ_TSTR, Dt5(->len), Dt5([1]));
  if (LJ_DUALNUM) {
    dasm_put(Dst, 5266);
  } else if (sse) {
    dasm_put(Dst, 5328);
  } else {
    dasm_put(Dst, 5338);
  }
  dasm_put(Dst, 5351, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+1, LJ_TISNUM);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 5382);
  } else if (sse) {
    dasm_put(Dst, 5405);
  } else {
    dasm_put(Dst, 5431);
  }
  dasm_put(Dst, 5455, Dt1(->base), Dt1(->base), LJ_TSTR, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), 1+2, LJ_TISNUM);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 5563);
  } else if (sse) {
    dasm_put(Dst, 5575);
  } else {
    dasm_put(Dst, 5590);
  }
  dasm_put(Dst, 5602, LJ_TSTR, LJ_TISNUM);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 2501);
  } else {
    dasm_put(Dst, 2244);
  }
  dasm_put(Dst, 5619, Dt5(->len));
  if (LJ_DUALNUM) {
    dasm_put(Dst, 5629);
  } else if (sse) {
    dasm_put(Dst, 5633);
  } else {
  }
  dasm_put(Dst, 5640, sizeof(GCstr)-1);
  dasm_put(Dst, 5715, 2+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold));
  dasm_put(Dst, 5774, LJ_TSTR, LJ_TISNUM);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 5791);
  } else if (sse) {
    dasm_put(Dst, 5799);
  } else {
    dasm_put(Dst, 5810);
  }
  dasm_put(Dst, 5826, Dt5(->len), DISPATCH_GL(tmpbuf.sz), Dt5([1]), DISPATCH_GL(tmpbuf.buf), DISPATCH_GL(tmpbuf.buf), 1+1);
  dasm_put(Dst, 5891, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len), DISPATCH_GL(tmpbuf.sz), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf));
  dasm_put(Dst, 5954, 1+1, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len), DISPATCH_GL(tmpbuf.sz));
  dasm_put(Dst, 6025, sizeof(GCstr), DISPATCH_GL(tmpbuf.buf), 1+1);
  dasm_put(Dst, 6110, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), LJ_TSTR, Dt5(->len), DISPATCH_GL(tmpbuf.sz), sizeof(GCstr), DISPATCH_GL(tmpbuf.buf));
  dasm_put(Dst, 6180, 1+1, LJ_TTAB);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 6248);
  } else if (sse) {
    dasm_put(Dst, 6255);
  } else {
  }
  dasm_put(Dst, 6265, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6273);
  } else {
  dasm_put(Dst, 2244);
  }
  if (sse) {
  dasm_put(Dst, 6290, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 106);
  if (LJ_DUALNUM || sse) {
    if (!sse) {
    }
    dasm_put(Dst, 6314);
  } else {
  }
  dasm_put(Dst, 6319);
  if (sse) {
  dasm_put(Dst, 6322, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  dasm_put(Dst, 6332);
  }
  dasm_put(Dst, 2221, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6341);
  } else {
  dasm_put(Dst, 2244);
  }
  if (sse) {
  dasm_put(Dst, 6358);
  } else {
  }
  dasm_put(Dst, 6373, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6398);
  } else {
  dasm_put(Dst, 6418);
  }
  if (sse) {
  dasm_put(Dst, 6423);
  } else {
  }
  dasm_put(Dst, 6440);
  if (sse) {
  dasm_put(Dst, 6322, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  dasm_put(Dst, 6332);
  }
  dasm_put(Dst, 2221, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6341);
  } else {
  dasm_put(Dst, 2244);
  }
  if (sse) {
  dasm_put(Dst, 6358);
  } else {
  }
  dasm_put(Dst, 6373, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6450);
  } else {
  dasm_put(Dst, 6418);
  }
  if (sse) {
  dasm_put(Dst, 6470);
  } else {
  }
  dasm_put(Dst, 6487);
  if (sse) {
  dasm_put(Dst, 6322, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  dasm_put(Dst, 6332);
  }
  dasm_put(Dst, 2221, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6341);
  } else {
  dasm_put(Dst, 2244);
  }
  if (sse) {
  dasm_put(Dst, 6358);
  } else {
  }
  dasm_put(Dst, 6373, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6497);
  } else {
  dasm_put(Dst, 6418);
  }
  if (sse) {
  dasm_put(Dst, 6517);
  } else {
  }
  dasm_put(Dst, 6534, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6341);
  } else {
  dasm_put(Dst, 2244);
  }
  if (sse) {
  dasm_put(Dst, 6290, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6549, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6341);
  } else {
  dasm_put(Dst, 2244);
  }
  if (sse) {
  dasm_put(Dst, 6290, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6565);
  if (LJ_DUALNUM) {
    dasm_put(Dst, 6314);
  } else if (sse) {
    dasm_put(Dst, 6571);
  } else {
  }
  dasm_put(Dst, 6583);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6594, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6341);
  } else {
  dasm_put(Dst, 2244);
  }
  if (sse) {
  dasm_put(Dst, 6290, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6602, LJ_TISNUM);
  } else if (sse) {
  dasm_put(Dst, 6617, 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6684);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6691, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6341);
  } else {
  dasm_put(Dst, 2244);
  }
  if (sse) {
  dasm_put(Dst, 6290, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6602, LJ_TISNUM);
  } else if (sse) {
  dasm_put(Dst, 6699, 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6766);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6774, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6341);
  } else {
  dasm_put(Dst, 2244);
  }
  if (sse) {
  dasm_put(Dst, 6290, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6602, LJ_TISNUM);
  } else if (sse) {
  dasm_put(Dst, 6782, 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6849);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6857, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6341);
  } else {
  dasm_put(Dst, 2244);
  }
  if (sse) {
  dasm_put(Dst, 6290, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6602, LJ_TISNUM);
  } else if (sse) {
  dasm_put(Dst, 6865, 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6932);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6939, LJ_TISNUM);
  if (LJ_DUALNUM) {
  dasm_put(Dst, 6341);
  } else {
  dasm_put(Dst, 2244);
  }
  if (sse) {
  dasm_put(Dst, 6290, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 6602, LJ_TISNUM);
  } else if (sse) {
  dasm_put(Dst, 6947, 2+1, LJ_TISNUM, LJ_TISNUM, (unsigned int)(U64x(43380000,00000000)), (unsigned int)((U64x(43380000,00000000))>>32));
  } else {
  }
  dasm_put(Dst, 7014, 1+2, 1+1, Dt1(->base), 8*LUA_MINSTACK, Dt1(->top), Dt1(->maxstack), Dt8(->f), Dt1(->base));
  dasm_put(Dst, 7090, Dt1(->top), Dt7(->pc), FRAME_TYPE, LUA_MINSTACK, Dt1(->base), Dt1(->base));
  dasm_put(Dst, 7217, Dt1(->top), Dt1(->base), Dt1(->top));
#if LJ_HASJIT
  dasm_put(Dst, 7256, DISPATCH_GL(hookmask), HOOK_VMEVENT, HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount));
#endif
  dasm_put(Dst, 7287, DISPATCH_GL(hookmask), HOOK_ACTIVE, DISPATCH_GL(hookmask), HOOK_ACTIVE, LUA_MASKLINE|LUA_MASKCOUNT, DISPATCH_GL(hookcount), LUA_MASKLINE);
  dasm_put(Dst, 7338, Dt1(->base), Dt1(->base), GG_DISP2STATIC);
#if LJ_HASJIT
  dasm_put(Dst, 7405, Dt7(->pc), PC2PROTO(framesize), Dt1(->base), Dt1(->top), GG_DISP2J, DISPATCH_J(L));
#endif
  dasm_put(Dst, 7452);
#if LJ_HASJIT
  dasm_put(Dst, 7282);
#endif
  dasm_put(Dst, 7459);
#if LJ_HASJIT
  dasm_put(Dst, 7462);
#endif
  dasm_put(Dst, 7472, Dt1(->base), Dt1(->top));
#if LJ_HASJIT
  dasm_put(Dst, 7506);
#endif
  dasm_put(Dst, 7511, Dt1(->base), Dt1(->top));
#if LJ_HASJIT
  dasm_put(Dst, 7542, DISPATCH_GL(vmstate), DISPATCH_GL(vmstate), ~LJ_VMST_EXIT, DISPATCH_J(exitno), DISPATCH_J(parent), 16*8+4*8, DISPATCH_GL(jit_L), DISPATCH_GL(jit_base), DISPATCH_J(L), DISPATCH_GL(jit_L), Dt1(->base), 4*8, GG_DISP2J, Dt1(->cframe), CFRAME_RAWMASK, CFRAME_OFS_L, Dt1(->base), CFRAME_OFS_PC);
#endif
  dasm_put(Dst, 7772);
#if LJ_HASJIT
  dasm_put(Dst, 7775, 9*16+4*8, -9*16, -8*16, -7*16, -6*16, -5*16, -4*16, -3*16, -2*16, -1*16, Dt7(->pc), PC2PROTO(k), DISPATCH_GL(jit_L), DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, BC_FUNCF);
  dasm_put(Dst, 7917);
#endif
  dasm_put(Dst, 7943);
  if (!sse) {
  dasm_put(Dst, 7946);
  }
  dasm_put(Dst, 7991, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  if (!sse) {
  dasm_put(Dst, 8077);
  }
  dasm_put(Dst, 8122, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32), (unsigned int)(U64x(bff00000,00000000)), (unsigned int)((U64x(bff00000,00000000))>>32));
  if (!sse) {
  dasm_put(Dst, 8208);
  }
  dasm_put(Dst, 8247, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  if (sse) {
    dasm_put(Dst, 8336, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(43300000,00000000)), (unsigned int)((U64x(43300000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  } else {
    dasm_put(Dst, 8450);
  }
  dasm_put(Dst, 8497);
  if (!sse) {
  } else {
    dasm_put(Dst, 8571);
  }
  dasm_put(Dst, 8574);
  dasm_put(Dst, 8659, (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32));
  dasm_put(Dst, 8762, (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32), (unsigned int)(U64x(3ff00000,00000000)), (unsigned int)((U64x(3ff00000,00000000))>>32), (unsigned int)(U64x(7ff00000,00000000)), (unsigned int)((U64x(7ff00000,00000000))>>32));
  dasm_put(Dst, 8918);
#if LJ_HASJIT
  if (sse) {
    dasm_put(Dst, 8959);
    dasm_put(Dst, 9029);
    dasm_put(Dst, 9102);
  } else {
    dasm_put(Dst, 9152);
    dasm_put(Dst, 9244);
  }
  dasm_put(Dst, 9290);
#endif
  dasm_put(Dst, 9294);
  if (sse) {
    dasm_put(Dst, 9297, (unsigned int)(U64x(80000000,00000000)), (unsigned int)((U64x(80000000,00000000))>>32));
    dasm_put(Dst, 9386, (unsigned int)(U64x(7fffffff,ffffffff)), (unsigned int)((U64x(7fffffff,ffffffff))>>32));
  } else {
    dasm_put(Dst, 9510);
    dasm_put(Dst, 9593);
    if (cmov) {
    dasm_put(Dst, 9648);
    } else {
    dasm_put(Dst, 9667);
    }
    dasm_put(Dst, 9290);
  }
  dasm_put(Dst, 9708);
#if LJ_HASFFI
#define DtE(_V) (int)(ptrdiff_t)&(((CCallState *)0)_V)
  dasm_put(Dst, 9736, DtE(->spadj));
#if LJ_TARGET_WINDOWS
#endif
  dasm_put(Dst, 9751, DtE(->nsp), offsetof(CCallState, stack), CCALL_SPS_EXTRA*8, DtE(->nfpr), DtE(->gpr[0]), DtE(->gpr[1]), DtE(->gpr[2]), DtE(->gpr[3]), DtE(->fpr[0]), DtE(->fpr[1]), DtE(->fpr[2]), DtE(->fpr[3]));
  dasm_put(Dst, 9832, DtE(->func), DtE(->gpr[0]), DtE(->fpr[0]));
#if LJ_TARGET_WINDOWS
#endif
  dasm_put(Dst, 9845);
#endif
  dasm_put(Dst, 9853);
#ifdef LUA_USE_ASSERT
  dasm_put(Dst, 9292);
#endif
  dasm_put(Dst, 9292);
}

/* Generate the code for a single instruction. */
static void build_ins(BuildCtx *ctx, BCOp op, int defop, int cmov, int sse)
{
  int vk = 0;
  dasm_put(Dst, 9856, defop);

  switch (op) {

  /* -- Comparison ops ---------------------------------------------------- */

  /* Remember: all ops branch for a true comparison, fall through otherwise. */


  case BC_ISLT: case BC_ISGE: case BC_ISLE: case BC_ISGT:
    if (LJ_DUALNUM) {
      dasm_put(Dst, 9858, LJ_TISNUM, LJ_TISNUM);
      switch (op) {
      case BC_ISLT:
      dasm_put(Dst, 9888);
      break;
      case BC_ISGE:
      dasm_put(Dst, 9893);
      break;
      case BC_ISLE:
      dasm_put(Dst, 9898);
      break;
      case BC_ISGT:
      dasm_put(Dst, 9903);
      break;
      default: break;  /* Shut up GCC. */
      }
      dasm_put(Dst, 9908, -BCBIAS_J*4, LJ_TISNUM);
      if (sse) {
	dasm_put(Dst, 9962);
      } else {
	dasm_put(Dst, 9973);
      }
      dasm_put(Dst, 9984);
      if (sse) {
	dasm_put(Dst, 9991);
	switch (op) {
	case BC_ISLT:
	dasm_put(Dst, 10011);
	break;
	case BC_ISGE:
	dasm_put(Dst, 10016);
	break;
	case BC_ISLE:
	dasm_put(Dst, 10021);
	break;
	case BC_ISGT:
	dasm_put(Dst, 10026);
	break;
	default: break;  /* Shut up GCC. */
	}
	dasm_put(Dst, 10031);
      } else {
	dasm_put(Dst, 10036);
      }
    } else {
      dasm_put(Dst, 10044, LJ_TISNUM, LJ_TISNUM);
    }
    if (sse) {
      dasm_put(Dst, 10065);
    } else {
      dasm_put(Dst, 10086);
      if (cmov) {
      dasm_put(Dst, 10102);
      } else {
      dasm_put(Dst, 10108);
      }
    }
    if (LJ_DUALNUM) {
      switch (op) {
      case BC_ISLT:
      dasm_put(Dst, 10011);
      break;
      case BC_ISGE:
      dasm_put(Dst, 10016);
      break;
      case BC_ISLE:
      dasm_put(Dst, 10021);
      break;
      case BC_ISGT:
      dasm_put(Dst, 10026);
      break;
      default: break;  /* Shut up GCC. */
      }
      dasm_put(Dst, 10031);
    } else {
      switch (op) {
      case BC_ISLT:
      dasm_put(Dst, 10115);
      break;
      case BC_ISGE:
      dasm_put(Dst, 10120);
      break;
      case BC_ISLE:
      dasm_put(Dst, 10125);
      break;
      case BC_ISGT:
      dasm_put(Dst, 10130);
      break;
      default: break;  /* Shut up GCC. */
      }
      dasm_put(Dst, 10135, -BCBIAS_J*4);
    }
    break;

  case BC_ISEQV: case BC_ISNEV:
    vk = op == BC_ISEQV;
    dasm_put(Dst, 10167);
    if (LJ_DUALNUM) {
      dasm_put(Dst, 10175, LJ_TISNUM, LJ_TISNUM);
      if (vk) {
	dasm_put(Dst, 10200);
      } else {
	dasm_put(Dst, 10205);
      }
      dasm_put(Dst, 10210, -BCBIAS_J*4, LJ_TISNUM);
      if (sse) {
	dasm_put(Dst, 10262);
      } else {
	dasm_put(Dst, 10269);
      }
      dasm_put(Dst, 10273);
      if (sse) {
	dasm_put(Dst, 10284);
      } else {
	dasm_put(Dst, 10296);
      }
      dasm_put(Dst, 10303);
    } else {
      dasm_put(Dst, 10308, LJ_TISNUM, LJ_TISNUM);
    }
    if (sse) {
      dasm_put(Dst, 10327);
    } else {
      dasm_put(Dst, 10345);
      if (cmov) {
      dasm_put(Dst, 10102);
      } else {
      dasm_put(Dst, 10108);
      }
    }
  iseqne_fp:
    if (vk) {
      dasm_put(Dst, 10358);
    } else {
      dasm_put(Dst, 10367);
    }
  iseqne_end:
    if (vk) {
      dasm_put(Dst, 10376, -BCBIAS_J*4);
      if (!LJ_HASFFI) {
	dasm_put(Dst, 4609);
      }
    } else {
      if (!LJ_HASFFI) {
	dasm_put(Dst, 4609);
      }
      dasm_put(Dst, 10391, -BCBIAS_J*4);
    }
    if (LJ_DUALNUM && (op == BC_ISEQV || op == BC_ISNEV ||
		       op == BC_ISEQN || op == BC_ISNEN)) {
      dasm_put(Dst, 10406);
    } else {
      dasm_put(Dst, 10147);
    }
    if (op == BC_ISEQV || op == BC_ISNEV) {
      dasm_put(Dst, 9829);
      if (LJ_HASFFI) {
	dasm_put(Dst, 10411, LJ_TCDATA, LJ_TCDATA);
      }
      dasm_put(Dst, 10430, LJ_TISPRI, LJ_TISTABUD, Dt6(->metatable), Dt6(->nomm), 1<<MM_eq);
      if (vk) {
	dasm_put(Dst, 10486);
      } else {
	dasm_put(Dst, 10490);
      }
      dasm_put(Dst, 10496);
    } else if (LJ_HASFFI) {
      dasm_put(Dst, 10501, LJ_TCDATA);
      if (LJ_DUALNUM && vk) {
	dasm_put(Dst, 10508);
      } else {
	dasm_put(Dst, 10481);
      }
      dasm_put(Dst, 10513);
    }
    break;
  case BC_ISEQS: case BC_ISNES:
    vk = op == BC_ISEQS;
    dasm_put(Dst, 10518, LJ_TSTR);
  iseqne_test:
    if (vk) {
      dasm_put(Dst, 10362);
    } else {
      dasm_put(Dst, 765);
    }
    goto iseqne_end;
  case BC_ISEQN: case BC_ISNEN:
    vk = op == BC_ISEQN;
    dasm_put(Dst, 10544);
    if (LJ_DUALNUM) {
      dasm_put(Dst, 10552, LJ_TISNUM, LJ_TISNUM);
      if (vk) {
	dasm_put(Dst, 10200);
      } else {
	dasm_put(Dst, 10205);
      }
      dasm_put(Dst, 10577, -BCBIAS_J*4, LJ_TISNUM);
      if (sse) {
	dasm_put(Dst, 10625);
      } else {
	dasm_put(Dst, 10632);
      }
      dasm_put(Dst, 10636);
      if (sse) {
	dasm_put(Dst, 10643);
      } else {
	dasm_put(Dst, 10655);
      }
      dasm_put(Dst, 10303);
    } else {
      dasm_put(Dst, 10662, LJ_TISNUM);
    }
    if (sse) {
      dasm_put(Dst, 10671);
    } else {
      dasm_put(Dst, 10689);
      if (cmov) {
      dasm_put(Dst, 10102);
      } else {
      dasm_put(Dst, 10108);
      }
    }
    goto iseqne_fp;
  case BC_ISEQP: case BC_ISNEP:
    vk = op == BC_ISEQP;
    dasm_put(Dst, 10702);
    if (!LJ_HASFFI) goto iseqne_test;
    if (vk) {
      dasm_put(Dst, 10716, -BCBIAS_J*4, LJ_TCDATA);
    } else {
      dasm_put(Dst, 10766, LJ_TCDATA, -BCBIAS_J*4);
    }
    break;

  /* -- Unary test and copy ops ------------------------------------------- */

  case BC_ISTC: case BC_ISFC: case BC_IST: case BC_ISF:
    dasm_put(Dst, 10810, LJ_TISTRUECOND);
    if (op == BC_IST || op == BC_ISTC) {
      dasm_put(Dst, 10130);
    } else {
      dasm_put(Dst, 10125);
    }
    if (op == BC_ISTC || op == BC_ISFC) {
      dasm_put(Dst, 10822);
    }
    dasm_put(Dst, 10135, -BCBIAS_J*4);
    break;

  /* -- Unary ops --------------------------------------------------------- */

  case BC_MOV:
    dasm_put(Dst, 10833);
    break;
  case BC_NOT:
    dasm_put(Dst, 10861, LJ_TISTRUECOND, LJ_TTRUE);
    break;
  case BC_UNM:
    if (LJ_DUALNUM) {
      dasm_put(Dst, 10897, LJ_TISNUM, LJ_TISNUM);
    } else {
      dasm_put(Dst, 10974, LJ_TISNUM);
    }
    if (sse) {
      dasm_put(Dst, 10985, (unsigned int)(U64x(80000000,00000000)), (unsigned int)((U64x(80000000,00000000))>>32));
    } else {
      dasm_put(Dst, 11010);
    }
    if (LJ_DUALNUM) {
      dasm_put(Dst, 10406);
    } else {
      dasm_put(Dst, 10147);
    }
    break;
  case BC_LEN:
    dasm_put(Dst, 11019, LJ_TSTR);
    if (LJ_DUALNUM) {
      dasm_put(Dst, 11033, Dt5(->len), LJ_TISNUM);
    } else if (sse) {
      dasm_put(Dst, 11047, Dt5(->len));
    } else {
      dasm_put(Dst, 11065, Dt5(->len));
    }
    dasm_put(Dst, 11074, LJ_TTAB);
    if (LJ_DUALNUM) {
    } else if (sse) {
      dasm_put(Dst, 11115);
    } else {
    }
    dasm_put(Dst, 11121);
    break;

  /* -- Binary ops -------------------------------------------------------- */


  case BC_ADDVN: case BC_ADDNV: case BC_ADDVV:
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11134);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11142, LJ_TISNUM, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 11175, LJ_TISNUM, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 11208, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 11241, LJ_TISNUM);
    if (vk == 1) {
    dasm_put(Dst, 11043);
    } else {
    dasm_put(Dst, 10829);
    }
    dasm_put(Dst, 10147);
    } else {
    dasm_put(Dst, 11134);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11247, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11259, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11270);
    } else {
    dasm_put(Dst, 11284);
    }
      break;
    case 1:
    dasm_put(Dst, 11292, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11304, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11315);
    } else {
    dasm_put(Dst, 11329);
    }
      break;
    default:
    dasm_put(Dst, 11337, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11359);
    } else {
    dasm_put(Dst, 11373);
    }
      break;
    }
    if (sse) {
    dasm_put(Dst, 11003);
    } else {
    dasm_put(Dst, 11015);
    }
    dasm_put(Dst, 10147);
    }
    break;
  case BC_SUBVN: case BC_SUBNV: case BC_SUBVV:
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11134);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11381, LJ_TISNUM, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 11414, LJ_TISNUM, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 11447, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 11241, LJ_TISNUM);
    if (vk == 1) {
    dasm_put(Dst, 11043);
    } else {
    dasm_put(Dst, 10829);
    }
    dasm_put(Dst, 10147);
    } else {
    dasm_put(Dst, 11134);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11247, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11259, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11480);
    } else {
    dasm_put(Dst, 11494);
    }
      break;
    case 1:
    dasm_put(Dst, 11292, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11304, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11502);
    } else {
    dasm_put(Dst, 11516);
    }
      break;
    default:
    dasm_put(Dst, 11337, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11524);
    } else {
    dasm_put(Dst, 11538);
    }
      break;
    }
    if (sse) {
    dasm_put(Dst, 11003);
    } else {
    dasm_put(Dst, 11015);
    }
    dasm_put(Dst, 10147);
    }
    break;
  case BC_MULVN: case BC_MULNV: case BC_MULVV:
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11134);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11546, LJ_TISNUM, LJ_TISNUM);
      break;
    case 1:
    dasm_put(Dst, 11580, LJ_TISNUM, LJ_TISNUM);
      break;
    default:
    dasm_put(Dst, 11614, LJ_TISNUM, LJ_TISNUM);
      break;
    }
    dasm_put(Dst, 11241, LJ_TISNUM);
    if (vk == 1) {
    dasm_put(Dst, 11043);
    } else {
    dasm_put(Dst, 10829);
    }
    dasm_put(Dst, 10147);
    } else {
    dasm_put(Dst, 11134);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11247, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11259, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11648);
    } else {
    dasm_put(Dst, 11662);
    }
      break;
    case 1:
    dasm_put(Dst, 11292, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11304, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11670);
    } else {
    dasm_put(Dst, 11684);
    }
      break;
    default:
    dasm_put(Dst, 11337, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11692);
    } else {
    dasm_put(Dst, 11706);
    }
      break;
    }
    if (sse) {
    dasm_put(Dst, 11003);
    } else {
    dasm_put(Dst, 11015);
    }
    dasm_put(Dst, 10147);
    }
    break;
  case BC_DIVVN: case BC_DIVNV: case BC_DIVVV:
    dasm_put(Dst, 11134);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11247, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11259, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11714);
    } else {
    dasm_put(Dst, 11728);
    }
      break;
    case 1:
    dasm_put(Dst, 11292, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11304, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11736);
    } else {
    dasm_put(Dst, 11750);
    }
      break;
    default:
    dasm_put(Dst, 11337, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11758);
    } else {
    dasm_put(Dst, 11772);
    }
      break;
    }
    if (sse) {
    dasm_put(Dst, 11003);
    } else {
    dasm_put(Dst, 11015);
    }
    dasm_put(Dst, 10147);
    break;
  case BC_MODVN:
    dasm_put(Dst, 11134);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11247, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11259, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11780);
    } else {
    dasm_put(Dst, 11794);
    }
      break;
    case 1:
    dasm_put(Dst, 11292, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11304, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11802);
    } else {
    dasm_put(Dst, 11816);
    }
      break;
    default:
    dasm_put(Dst, 11337, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11824);
    } else {
    dasm_put(Dst, 11838);
    }
      break;
    }
    dasm_put(Dst, 11846);
    if (sse) {
    dasm_put(Dst, 11003);
    } else {
    dasm_put(Dst, 11015);
    }
    dasm_put(Dst, 10147);
    break;
  case BC_MODNV: case BC_MODVV:
    dasm_put(Dst, 11134);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11247, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11259, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11780);
    } else {
    dasm_put(Dst, 11794);
    }
      break;
    case 1:
    dasm_put(Dst, 11292, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11304, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11802);
    } else {
    dasm_put(Dst, 11816);
    }
      break;
    default:
    dasm_put(Dst, 11337, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11824);
    } else {
    dasm_put(Dst, 11838);
    }
      break;
    }
    dasm_put(Dst, 11852);
    break;
  case BC_POW:
    dasm_put(Dst, 11134);
    vk = ((int)op - BC_ADDVN) / (BC_ADDNV-BC_ADDVN);
    switch (vk) {
    case 0:
    dasm_put(Dst, 11247, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11259, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11780);
    } else {
    dasm_put(Dst, 11794);
    }
      break;
    case 1:
    dasm_put(Dst, 11292, LJ_TISNUM);
    if (LJ_DUALNUM) {
    dasm_put(Dst, 11304, LJ_TISNUM);
    }
    if (sse) {
    dasm_put(Dst, 11802);
    } else {
    dasm_put(Dst, 11816);
    }
      break;
    default:
    dasm_put(Dst, 11337, LJ_TISNUM, LJ_TISNUM);
    if (sse) {
    dasm_put(Dst, 11824);
    } else {
    dasm_put(Dst, 11838);
    }
      break;
    }
    dasm_put(Dst, 11857);
    if (sse) {
    dasm_put(Dst, 11003);
    } else {
    dasm_put(Dst, 11015);
    }
    dasm_put(Dst, 10147);
    break;

  case BC_CAT:
    dasm_put(Dst, 11861, Dt1(->base), Dt1(->base));
    break;

  /* -- Constant ops ------------------------------------------------------ */

  case BC_KSTR:
    dasm_put(Dst, 11944, LJ_TSTR);
    break;
  case BC_KCDATA:
#if LJ_HASFFI
    dasm_put(Dst, 11944, LJ_TCDATA);
#endif
    break;
  case BC_KSHORT:
    if (LJ_DUALNUM) {
      dasm_put(Dst, 11979, LJ_TISNUM);
    } else if (sse) {
      dasm_put(Dst, 11991);
    } else {
      dasm_put(Dst, 12006);
    }
    dasm_put(Dst, 10147);
    break;
  case BC_KNUM:
    if (sse) {
      dasm_put(Dst, 12014);
    } else {
      dasm_put(Dst, 12027);
    }
    dasm_put(Dst, 10147);
    break;
  case BC_KPRI:
    dasm_put(Dst, 12034);
    break;
  case BC_KNIL:
    dasm_put(Dst, 12062, LJ_TNIL);
    break;

  /* -- Upvalue and function ops ------------------------------------------ */

  case BC_UGET:
    dasm_put(Dst, 12109, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_USETV:
#define TV2MARKOFS \
 ((int32_t)offsetof(GCupval, marked)-(int32_t)offsetof(GCupval, tv))
    dasm_put(Dst, 12149, offsetof(GCfuncL, uvptr), DtA(->closed), DtA(->v), TV2MARKOFS, LJ_GC_BLACK, LJ_TISGCV, LJ_TISNUM - LJ_TISGCV, Dt4(->gch.marked), LJ_GC_WHITES, GG_DISP2G);
    dasm_put(Dst, 12240);
    break;
#undef TV2MARKOFS
  case BC_USETS:
    dasm_put(Dst, 12252, offsetof(GCfuncL, uvptr), DtA(->v), LJ_TSTR, DtA(->marked), LJ_GC_BLACK, Dt4(->gch.marked), LJ_GC_WHITES, DtA(->closed), GG_DISP2G);
    break;
  case BC_USETN:
    dasm_put(Dst, 12345);
    if (sse) {
      dasm_put(Dst, 12350);
    } else {
      dasm_put(Dst, 10658);
    }
    dasm_put(Dst, 12357, offsetof(GCfuncL, uvptr), DtA(->v));
    if (sse) {
      dasm_put(Dst, 12366);
    } else {
      dasm_put(Dst, 12372);
    }
    dasm_put(Dst, 10147);
    break;
  case BC_USETP:
    dasm_put(Dst, 12375, offsetof(GCfuncL, uvptr), DtA(->v));
    break;
  case BC_UCLO:
    dasm_put(Dst, 12414, -BCBIAS_J*4, Dt1(->openupval), Dt1(->base), Dt1(->base));
    break;

  case BC_FNEW:
    dasm_put(Dst, 12469, Dt1(->base), Dt1(->base), LJ_TFUNC);
    break;

  /* -- Table ops --------------------------------------------------------- */

  case BC_TNEW:
    dasm_put(Dst, 12535, Dt1(->base), DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), LJ_TTAB);
    break;
  case BC_TDUP:
    dasm_put(Dst, 12657, DISPATCH_GL(gc.total), DISPATCH_GL(gc.threshold), Dt1(->base), Dt1(->base), LJ_TTAB);
    break;

  case BC_GGET:
    dasm_put(Dst, 12752, Dt7(->env));
    break;
  case BC_GSET:
    dasm_put(Dst, 12771, Dt7(->env));
    break;

  case BC_TGETV:
    dasm_put(Dst, 12790, LJ_TTAB);
    if (LJ_DUALNUM) {
      dasm_put(Dst, 12813, LJ_TISNUM);
    } else {
      dasm_put(Dst, 12827, LJ_TISNUM);
      if (sse) {
	dasm_put(Dst, 12838);
      } else {
      }
      dasm_put(Dst, 12859);
    }
    dasm_put(Dst, 12864, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_index, LJ_TNIL);
    dasm_put(Dst, 12955, LJ_TSTR);
    break;
  case BC_TGETS:
    dasm_put(Dst, 12973, LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), LJ_TNIL);
    dasm_put(Dst, 13057, LJ_TNIL, DtB(->next), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    break;
  case BC_TGETB:
    dasm_put(Dst, 13128, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_index);
    dasm_put(Dst, 13223, LJ_TNIL);
    break;

  case BC_TSETV:
    dasm_put(Dst, 13240, LJ_TTAB);
    if (LJ_DUALNUM) {
      dasm_put(Dst, 12813, LJ_TISNUM);
    } else {
      dasm_put(Dst, 12827, LJ_TISNUM);
      if (sse) {
	dasm_put(Dst, 12838);
      } else {
      }
      dasm_put(Dst, 13263);
    }
    dasm_put(Dst, 13268, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex);
    dasm_put(Dst, 13348, LJ_TSTR, Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETS:
    dasm_put(Dst, 13405, LJ_TTAB, Dt6(->hmask), Dt5(->hash), sizeof(Node), Dt6(->nomm), Dt6(->node), DtB(->key.it), LJ_TSTR, DtB(->key.gcr), LJ_TNIL);
    dasm_put(Dst, 13481, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable), Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, DtB(->next));
    dasm_put(Dst, 13569, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, LJ_TSTR, Dt1(->base), Dt1(->base), Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;
  case BC_TSETB:
    dasm_put(Dst, 13660, LJ_TTAB, Dt6(->asize), Dt6(->array), LJ_TNIL, Dt6(->marked), LJ_GC_BLACK, Dt6(->metatable));
    dasm_put(Dst, 13754, Dt6(->metatable), Dt6(->nomm), 1<<MM_newindex, Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;

  case BC_TSETM:
    dasm_put(Dst, 13800, Dt6(->marked), LJ_GC_BLACK, Dt6(->asize), Dt6(->array), Dt1(->base), Dt1(->base));
    dasm_put(Dst, 13943, Dt6(->marked), (uint8_t)~LJ_GC_BLACK, DISPATCH_GL(gc.grayagain), DISPATCH_GL(gc.grayagain), Dt6(->gclist));
    break;

  /* -- Calls and vararg handling ----------------------------------------- */

  case BC_CALL: case BC_CALLM:
    dasm_put(Dst, 11138);
    if (op == BC_CALLM) {
      dasm_put(Dst, 13961);
    }
    dasm_put(Dst, 13966, LJ_TFUNC, Dt7(->pc));
    break;

  case BC_CALLMT:
    dasm_put(Dst, 13961);
    break;
  case BC_CALLT:
    dasm_put(Dst, 14008, LJ_TFUNC, FRAME_TYPE, Dt7(->ffid), Dt7(->pc));
    dasm_put(Dst, 14123, FRAME_TYPE, Dt7(->pc), PC2PROTO(k), FRAME_VARG, FRAME_TYPEP, FRAME_VARG);
    break;

  case BC_ITERC:
    dasm_put(Dst, 14194, LJ_TFUNC, 2+1, Dt7(->pc));
    break;

  case BC_ITERN:
#if LJ_HASJIT
#endif
    dasm_put(Dst, 14265, Dt6(->asize), Dt6(->array), LJ_TNIL);
    if (LJ_DUALNUM) {
      dasm_put(Dst, 11038, LJ_TISNUM);
    } else if (sse) {
      dasm_put(Dst, 11115);
    } else {
      dasm_put(Dst, 14311);
    }
    dasm_put(Dst, 14317);
    if (LJ_DUALNUM) {
    } else if (sse) {
      dasm_put(Dst, 11003);
    } else {
      dasm_put(Dst, 11015);
    }
    dasm_put(Dst, 14330, -BCBIAS_J*4);
    if (!LJ_DUALNUM && !sse) {
      dasm_put(Dst, 14382);
    }
    dasm_put(Dst, 14388, Dt6(->hmask), sizeof(Node), Dt6(->node), DtB(->val.it), LJ_TNIL, DtB(->key), DtB(->val));
    break;

  case BC_ISNEXT:
    dasm_put(Dst, 14460, LJ_TFUNC, LJ_TTAB, LJ_TNIL, Dt8(->ffid), FF_next_N, -BCBIAS_J*4, BC_JMP, -BCBIAS_J*4, BC_ITERC);
    break;

  case BC_VARG:
    dasm_put(Dst, 14560, (8+FRAME_VARG), LJ_TNIL, Dt1(->maxstack));
    dasm_put(Dst, 14720, Dt1(->base), Dt1(->top), Dt1(->base), Dt1(->top));
    break;

  /* -- Returns ----------------------------------------------------------- */

  case BC_RETM:
    dasm_put(Dst, 13961);
    break;

  case BC_RET: case BC_RET0: case BC_RET1:
    if (op != BC_RET0) {
      dasm_put(Dst, 14786);
    }
    dasm_put(Dst, 14790, FRAME_TYPE);
    switch (op) {
    case BC_RET:
      dasm_put(Dst, 14809);
      break;
    case BC_RET1:
      dasm_put(Dst, 14861);
      /* fallthrough */
    case BC_RET0:
      dasm_put(Dst, 14871);
    default:
      break;
    }
    dasm_put(Dst, 14882, Dt7(->pc), PC2PROTO(k));
    if (op == BC_RET) {
      dasm_put(Dst, 14926, LJ_TNIL);
    } else {
      dasm_put(Dst, 14935, LJ_TNIL);
    }
    dasm_put(Dst, 14942, -FRAME_VARG, FRAME_TYPEP);
    if (op != BC_RET0) {
      dasm_put(Dst, 14966);
    }
    dasm_put(Dst, 4688);
    break;

  /* -- Loops and branches ------------------------------------------------ */


  case BC_FORL:
#if LJ_HASJIT
    dasm_put(Dst, 14970, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
    break;

  case BC_JFORI:
  case BC_JFORL:
#if !LJ_HASJIT
    break;
#endif
  case BC_FORI:
  case BC_IFORL:
    vk = (op == BC_IFORL || op == BC_JFORL);
    dasm_put(Dst, 14991);
    if (LJ_DUALNUM) {
      dasm_put(Dst, 14995, LJ_TISNUM);
      if (!vk) {
	dasm_put(Dst, 15005, LJ_TISNUM, LJ_TISNUM);
      } else {
#ifdef LUA_USE_ASSERT
	dasm_put(Dst, 15034, LJ_TISNUM, LJ_TISNUM);
#endif
	dasm_put(Dst, 15053);
      }
      dasm_put(Dst, 15072, LJ_TISNUM);
      if (op == BC_FORI) {
	dasm_put(Dst, 15083, -BCBIAS_J*4);
      } else if (op == BC_JFORI) {
	dasm_put(Dst, 15097, -BCBIAS_J*4, BC_JLOOP);
      } else if (op == BC_IFORL) {
	dasm_put(Dst, 15115, -BCBIAS_J*4);
      } else {
	dasm_put(Dst, 15107, BC_JLOOP);
      }
      dasm_put(Dst, 15129);
      if (vk) {
	dasm_put(Dst, 15153);
      }
      dasm_put(Dst, 15072, LJ_TISNUM);
      if (op == BC_FORI) {
	dasm_put(Dst, 15162);
      } else if (op == BC_JFORI) {
	dasm_put(Dst, 15167, -BCBIAS_J*4, BC_JLOOP);
      } else if (op == BC_IFORL) {
	dasm_put(Dst, 15181);
      } else {
	dasm_put(Dst, 15177, BC_JLOOP);
      }
      dasm_put(Dst, 15186);
    } else if (!vk) {
      dasm_put(Dst, 15193, LJ_TISNUM);
    }
    if (!vk) {
      dasm_put(Dst, 15199, LJ_TISNUM);
    } else {
#ifdef LUA_USE_ASSERT
      dasm_put(Dst, 15213, LJ_TISNUM, LJ_TISNUM);
#endif
    }
    dasm_put(Dst, 15232);
    if (!vk) {
      dasm_put(Dst, 15236, LJ_TISNUM);
    }
    if (sse) {
      dasm_put(Dst, 15245);
      if (vk) {
	dasm_put(Dst, 15257);
      } else {
	dasm_put(Dst, 15276);
      }
      dasm_put(Dst, 15281);
    } else {
      dasm_put(Dst, 15294);
      if (vk) {
	dasm_put(Dst, 15300);
      } else {
	dasm_put(Dst, 15316);
      }
      dasm_put(Dst, 15324);
      if (cmov) {
      dasm_put(Dst, 10102);
      } else {
      dasm_put(Dst, 10108);
      }
      if (!cmov) {
	dasm_put(Dst, 15329);
      }
    }
    if (op == BC_FORI) {
      if (LJ_DUALNUM) {
	dasm_put(Dst, 15335);
      } else {
	dasm_put(Dst, 15340, -BCBIAS_J*4);
      }
    } else if (op == BC_JFORI) {
      dasm_put(Dst, 15350, -BCBIAS_J*4, BC_JLOOP);
    } else if (op == BC_IFORL) {
      if (LJ_DUALNUM) {
	dasm_put(Dst, 15364);
      } else {
	dasm_put(Dst, 15369, -BCBIAS_J*4);
      }
    } else {
      dasm_put(Dst, 15360, BC_JLOOP);
    }
    if (LJ_DUALNUM) {
      dasm_put(Dst, 10031);
    } else {
      dasm_put(Dst, 10788);
    }
    if (sse) {
      dasm_put(Dst, 15379);
    }
    break;

  case BC_ITERL:
#if LJ_HASJIT
    dasm_put(Dst, 14970, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
    break;

  case BC_JITERL:
#if !LJ_HASJIT
    break;
#endif
  case BC_IITERL:
    dasm_put(Dst, 15390, LJ_TNIL);
    if (op == BC_JITERL) {
      dasm_put(Dst, 15405, BC_JLOOP);
    } else {
      dasm_put(Dst, 15419, -BCBIAS_J*4);
    }
    dasm_put(Dst, 10145);
    break;

  case BC_LOOP:
#if LJ_HASJIT
    dasm_put(Dst, 14970, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
    break;

  case BC_ILOOP:
    dasm_put(Dst, 10147);
    break;

  case BC_JLOOP:
#if LJ_HASJIT
    dasm_put(Dst, 15435, DISPATCH_J(trace), DtD(->mcode), DISPATCH_GL(jit_base), DISPATCH_GL(jit_L), 9*16+4*8, -1*16, -2*16, -3*16, -4*16, -5*16, -6*16, -7*16, -8*16, -9*16);
#endif
    break;

  case BC_JMP:
    dasm_put(Dst, 15544, -BCBIAS_J*4);
    break;

  /* -- Function headers -------------------------------------------------- */

   /*
   ** Reminder: A function may be called with func/args above L->maxstack,
   ** i.e. occupying EXTRA_STACK slots. And vmeta_call may add one extra slot,
   ** too. This means all FUNC* ops (including fast functions) must check
   ** for stack overflow _before_ adding more slots!
   */

  case BC_FUNCF:
#if LJ_HASJIT
    dasm_put(Dst, 15569, HOTCOUNT_PCMASK, GG_DISP2HOT);
#endif
  case BC_FUNCV:  /* NYI: compiled vararg functions. */
    break;

  case BC_JFUNCF:
#if !LJ_HASJIT
    break;
#endif
  case BC_IFUNCF:
    dasm_put(Dst, 15590, -4+PC2PROTO(k), Dt1(->maxstack), -4+PC2PROTO(numparams));
    if (op == BC_JFUNCF) {
      dasm_put(Dst, 15620, BC_JLOOP);
    } else {
      dasm_put(Dst, 10147);
    }
    dasm_put(Dst, 15629, LJ_TNIL);
    break;

  case BC_JFUNCV:
#if !LJ_HASJIT
    break;
#endif
    dasm_put(Dst, 9292);
    break;  /* NYI: compiled vararg functions. */

  case BC_IFUNCV:
    dasm_put(Dst, 15651, FRAME_VARG, Dt1(->maxstack), -4+PC2PROTO(numparams), LJ_TNIL);
    if (op == BC_JFUNCV) {
      dasm_put(Dst, 15620, BC_JLOOP);
    } else {
      dasm_put(Dst, 15742, -4+PC2PROTO(k));
    }
    dasm_put(Dst, 15765, LJ_TNIL);
    break;

  case BC_FUNCC:
  case BC_FUNCCW:
    dasm_put(Dst, 15787, Dt8(->f), Dt1(->base), 8*LUA_MINSTACK, Dt1(->maxstack), Dt1(->top));
    if (op == BC_FUNCC) {
      dasm_put(Dst, 2352);
    } else {
      dasm_put(Dst, 15817);
    }
    dasm_put(Dst, 15825, DISPATCH_GL(vmstate), ~LJ_VMST_C);
    if (op == BC_FUNCC) {
      dasm_put(Dst, 15834);
    } else {
      dasm_put(Dst, 15838, DISPATCH_GL(wrapf));
    }
    dasm_put(Dst, 15843, DISPATCH_GL(vmstate), ~LJ_VMST_INTERP, Dt1(->base), Dt1(->top));
    break;

  /* ---------------------------------------------------------------------- */

  default:
    fprintf(stderr, "Error: undefined opcode BC_%s\n", bc_names[op]);
    exit(2);
    break;
  }
}

static int build_backend(BuildCtx *ctx)
{
  int op;
  int cmov = 1;
  int sse = 0;
#ifdef LUAJIT_CPU_NOCMOV
  cmov = 0;
#endif
#if defined(LUAJIT_CPU_SSE2) || defined(LJ_TARGET_X64)
  sse = 1;
#endif

  dasm_growpc(Dst, BC__MAX);

  build_subroutines(ctx, cmov, sse);

  dasm_put(Dst, 15868);
  for (op = 0; op < BC__MAX; op++)
    build_ins(ctx, (BCOp)op, op, cmov, sse);

  return BC__MAX;
}

/* Emit pseudo frame-info for all assembler functions. */
static void emit_asm_debug(BuildCtx *ctx)
{
#if LJ_64
#define SZPTR	"8"
#define BSZPTR	"3"
#define REG_SP	"0x7"
#define REG_RA	"0x10"
#else
#define SZPTR	"4"
#define BSZPTR	"2"
#define REG_SP	"0x4"
#define REG_RA	"0x8"
#endif
  switch (ctx->mode) {
  case BUILD_elfasm:
    fprintf(ctx->fp, "\t.section .debug_frame,\"\",@progbits\n");
    fprintf(ctx->fp,
	".Lframe0:\n"
	"\t.long .LECIE0-.LSCIE0\n"
	".LSCIE0:\n"
	"\t.long 0xffffffff\n"
	"\t.byte 0x1\n"
	"\t.string \"\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.byte 0xc\n\t.uleb128 " REG_SP "\n\t.uleb128 " SZPTR "\n"
	"\t.byte 0x80+" REG_RA "\n\t.uleb128 0x1\n"
	"\t.align " SZPTR "\n"
	".LECIE0:\n\n");
    fprintf(ctx->fp,
	".LSFDE0:\n"
	"\t.long .LEFDE0-.LASFDE0\n"
	".LASFDE0:\n"
	"\t.long .Lframe0\n"
	"\t.long .Lbegin\n"
	"\t.long %d\n"
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
#if LJ_64
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.byte 0x8f\n\t.uleb128 0x4\n"	/* offset r15 */
	"\t.byte 0x8e\n\t.uleb128 0x5\n"	/* offset r14 */
#else
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	".LEFDE0:\n\n", (int)ctx->codesz, CFRAME_SIZE);
    fprintf(ctx->fp, "\t.section .eh_frame,\"a\",@progbits\n");
    fprintf(ctx->fp,
	".Lframe1:\n"
	"\t.long .LECIE1-.LSCIE1\n"
	".LSCIE1:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zPR\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.uleb128 6\n"			/* augmentation length */
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.long lj_err_unwind_dwarf-.\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.uleb128 " REG_SP "\n\t.uleb128 " SZPTR "\n"
	"\t.byte 0x80+" REG_RA "\n\t.uleb128 0x1\n"
	"\t.align " SZPTR "\n"
	".LECIE1:\n\n");
    fprintf(ctx->fp,
	".LSFDE1:\n"
	"\t.long .LEFDE1-.LASFDE1\n"
	".LASFDE1:\n"
	"\t.long .LASFDE1-.Lframe1\n"
	"\t.long .Lbegin-.\n"
	"\t.long %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
#if LJ_64
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.byte 0x8f\n\t.uleb128 0x4\n"	/* offset r15 */
	"\t.byte 0x8e\n\t.uleb128 0x5\n"	/* offset r14 */
#else
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	".LEFDE1:\n\n", (int)ctx->codesz, CFRAME_SIZE);
    break;
  case BUILD_coffasm:
    fprintf(ctx->fp, "\t.section .eh_frame,\"dr\"\n");
    fprintf(ctx->fp,
      "\t.def %slj_err_unwind_dwarf; .scl 2; .type 32; .endef\n",
      LJ_32 ? "_" : "");
    fprintf(ctx->fp,
	"Lframe1:\n"
	"\t.long LECIE1-LSCIE1\n"
	"LSCIE1:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.string \"zP\"\n"
	"\t.uleb128 0x1\n"
	"\t.sleb128 -" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.uleb128 5\n"			/* augmentation length */
	"\t.byte 0x00\n"			/* absptr */
	"\t.long %slj_err_unwind_dwarf\n"
	"\t.byte 0xc\n\t.uleb128 " REG_SP "\n\t.uleb128 " SZPTR "\n"
	"\t.byte 0x80+" REG_RA "\n\t.uleb128 0x1\n"
	"\t.align " SZPTR "\n"
	"LECIE1:\n\n", LJ_32 ? "_" : "");
    fprintf(ctx->fp,
	"LSFDE1:\n"
	"\t.long LEFDE1-LASFDE1\n"
	"LASFDE1:\n"
	"\t.long LASFDE1-Lframe1\n"
	"\t.long %slj_vm_asm_begin\n"
	"\t.long %d\n"
	"\t.uleb128 0\n"			/* augmentation length */
	"\t.byte 0xe\n\t.uleb128 %d\n"		/* def_cfa_offset */
#if LJ_64
	"\t.byte 0x86\n\t.uleb128 0x2\n"	/* offset rbp */
	"\t.byte 0x83\n\t.uleb128 0x3\n"	/* offset rbx */
	"\t.byte 0x8f\n\t.uleb128 0x4\n"	/* offset r15 */
	"\t.byte 0x8e\n\t.uleb128 0x5\n"	/* offset r14 */
#else
	"\t.byte 0x85\n\t.uleb128 0x2\n"	/* offset ebp */
	"\t.byte 0x87\n\t.uleb128 0x3\n"	/* offset edi */
	"\t.byte 0x86\n\t.uleb128 0x4\n"	/* offset esi */
	"\t.byte 0x83\n\t.uleb128 0x5\n"	/* offset ebx */
#endif
	"\t.align " SZPTR "\n"
	"LEFDE1:\n\n", LJ_32 ? "_" : "", (int)ctx->codesz, CFRAME_SIZE);
    break;
  /* Mental note: never let Apple design an assembler.
  ** Or a linker. Or a plastic case. But I digress.
  */
  case BUILD_machasm: {
    int i;
    fprintf(ctx->fp, "\t.section __TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support\n");
    fprintf(ctx->fp,
	"EH_frame1:\n"
	"\t.set L$set$x,LECIEX-LSCIEX\n"
	"\t.long L$set$x\n"
	"LSCIEX:\n"
	"\t.long 0\n"
	"\t.byte 0x1\n"
	"\t.ascii \"zPR\\0\"\n"
	"\t.byte 0x1\n"
	"\t.byte 128-" SZPTR "\n"
	"\t.byte " REG_RA "\n"
	"\t.byte 6\n"				/* augmentation length */
	"\t.byte 0x9b\n"			/* indirect|pcrel|sdata4 */
#if LJ_64
	"\t.long _lj_err_unwind_dwarf+4@GOTPCREL\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.byte " REG_SP "\n\t.byte " SZPTR "\n"
#else
	"\t.long L_lj_err_unwind_dwarf$non_lazy_ptr-.\n"
	"\t.byte 0x1b\n"			/* pcrel|sdata4 */
	"\t.byte 0xc\n\t.byte 0x5\n\t.byte 0x4\n"  /* esp=5 on 32 bit MACH-O. */
#endif
	"\t.byte 0x80+" REG_RA "\n\t.byte 0x1\n"
	"\t.align " BSZPTR "\n"
	"LECIEX:\n\n");
    for (i = 0; i < ctx->nsym; i++) {
      const char *name = ctx->sym[i].name;
      int32_t size = ctx->sym[i+1].ofs - ctx->sym[i].ofs;
      if (size == 0) continue;
      fprintf(ctx->fp,
	  "%s.eh:\n"
	  "LSFDE%d:\n"
	  "\t.set L$set$%d,LEFDE%d-LASFDE%d\n"
	  "\t.long L$set$%d\n"
	  "LASFDE%d:\n"
	  "\t.long LASFDE%d-EH_frame1\n"
	  "\t.long %s-.\n"
	  "\t.long %d\n"
	  "\t.byte 0\n"			/* augmentation length */
	  "\t.byte 0xe\n\t.byte %d\n"		/* def_cfa_offset */
#if LJ_64
	  "\t.byte 0x86\n\t.byte 0x2\n"	/* offset rbp */
	  "\t.byte 0x83\n\t.byte 0x3\n"	/* offset rbx */
	  "\t.byte 0x8f\n\t.byte 0x4\n"	/* offset r15 */
	  "\t.byte 0x8e\n\t.byte 0x5\n"	/* offset r14 */
#else
	  "\t.byte 0x84\n\t.byte 0x2\n"	/* offset ebp (4 for MACH-O)*/
	  "\t.byte 0x87\n\t.byte 0x3\n"	/* offset edi */
	  "\t.byte 0x86\n\t.byte 0x4\n"	/* offset esi */
	  "\t.byte 0x83\n\t.byte 0x5\n"	/* offset ebx */
#endif
	  "\t.align " BSZPTR "\n"
	  "LEFDE%d:\n\n",
	  name, i, i, i, i, i, i, i, name, size, CFRAME_SIZE, i);
    }
#if LJ_64
    fprintf(ctx->fp, "\t.subsections_via_symbols\n");
#else
    fprintf(ctx->fp,
      "\t.non_lazy_symbol_pointer\n"
      "L_lj_err_unwind_dwarf$non_lazy_ptr:\n"
      ".indirect_symbol _lj_err_unwind_dwarf\n"
      ".long 0\n");
#endif
    }
    break;
  default:  /* Difficult for other modes. */
    break;
  }
}

